<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Exiled.API</name>
    </assembly>
    <members>
        <member name="T:Exiled.API.Enums.AmmoType">
            <summary>
            Ammo types present in the game.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.AmmoType.Nato556">
            <summary>
            5.56mm Ammunition.
            Used by <see cref="F:ItemType.GunE11SR"/>.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.AmmoType.Nato762">
            <summary>
            7.62mm mm Ammunition.
            Used by <see cref="F:ItemType.GunMP7"/> and <see cref="F:ItemType.GunLogicer"/>.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.AmmoType.Nato9">
            <summary>
            9mm Ammunition.
            Used by <see cref="F:ItemType.GunCOM15"/>, <see cref="F:ItemType.GunProject90"/> and <see cref="F:ItemType.GunUSP"/>.
            </summary>
        </member>
        <member name="T:Exiled.API.Enums.AuthenticationType">
            <summary>
            Players authentication types.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.AuthenticationType.Steam">
            <summary>
            Indicates that the player has been authenticated through Steam.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.AuthenticationType.Discord">
            <summary>
            Indicates that the player has been authenticated through Discord.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.AuthenticationType.Northwood">
            <summary>
            Indicates that the player has been authenticated as a Northwood staffer.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.AuthenticationType.Patreon">
            <summary>
            Indicates that the player has been authenticated as a Patreon.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.AuthenticationType.Unknown">
            <summary>
            Indicates that the player has been authenticated through an unknown provider.
            </summary>
        </member>
        <member name="T:Exiled.API.Enums.ElevatorType">
            <summary>
            The unique type of elevator.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.ElevatorType.Unknown">
            <summary>
            Unknown elevator Type.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.ElevatorType.GateA">
            <summary>
            Entrance Gate A elevator.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.ElevatorType.GateB">
            <summary>
            Entrance Gate B elevator.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.ElevatorType.Nuke">
            <summary>
            Heavy Containment Zone Nuke elevator.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.ElevatorType.Scp049">
            <summary>
            Heavy Containment Zone SCP 049 elevator.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.ElevatorType.LczA">
            <summary>
            Light Containment Zone checkpoint A elevator.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.ElevatorType.LczB">
            <summary>
            Light Containment Zone checkpoint B elevator.
            </summary>
        </member>
        <member name="T:Exiled.API.Enums.EnvironmentType">
            <summary>
            A set of environment types.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.EnvironmentType.Development">
            <summary>
            The development environment, for developers.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.EnvironmentType.Testing">
            <summary>
            The testing environment, for testing things.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.EnvironmentType.Production">
            <summary>
            The production environment, for the public.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.EnvironmentType.Ptb">
            <summary>
            The ptb environment, for Public Test Builds.
            </summary>
        </member>
        <member name="T:Exiled.API.Enums.LeadingTeam">
            <summary>
            The team that is winning the round.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.LeadingTeam.FacilityForces">
            <summary>
            Represents Scientists, Guards, and NTF.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.LeadingTeam.ChaosInsurgency">
            <summary>
            Represents Class D and Chaos Insurgency.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.LeadingTeam.Anomalies">
            <summary>
            Represents SCP.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.LeadingTeam.Draw">
            <summary>
            Represents a draw.
            </summary>
        </member>
        <member name="T:Exiled.API.Enums.PluginPriority">
            <summary>
            Provides simple and readable plugin priority values.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.PluginPriority.Default">
            <inheritdoc cref="F:Exiled.API.Enums.PluginPriority.Medium"/>
        </member>
        <member name="F:Exiled.API.Enums.PluginPriority.Last">
            <summary>
            Execute the plugin last, after other ones.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.PluginPriority.Lowest">
            <inheritdoc cref="F:Exiled.API.Enums.PluginPriority.Last"/>
        </member>
        <member name="F:Exiled.API.Enums.PluginPriority.Lower">
            <summary>
            Default plugin priority.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.PluginPriority.Low">
            <summary>
            Low plugin priority.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.PluginPriority.Medium">
            <summary>
            Medium plugin priority.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.PluginPriority.High">
            <summary>
            Higher plugin priority.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.PluginPriority.Higher">
            <summary>
            Higher plugin priority.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.PluginPriority.Highest">
            <inheritdoc cref="F:Exiled.API.Enums.PluginPriority.First"/>
        </member>
        <member name="F:Exiled.API.Enums.PluginPriority.First">
            <summary>
            Execute the plugin first, before other ones.
            </summary>
        </member>
        <member name="T:Exiled.API.Enums.RespawnEffectType">
            <summary>
            Layers game respawn effects.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.RespawnEffectType.PlayChaosInsurgencyMusic">
            <summary>
            Plays the <see cref="F:RoleType.ChaosInsurgency"/> music to alive <see cref="F:RoleType.ClassD"/> and <see cref="F:RoleType.ChaosInsurgency"/>.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.RespawnEffectType.SummonChaosInsurgencyVan">
            <summary>
            Summons the <see cref="F:RoleType.ChaosInsurgency"/> van.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.RespawnEffectType.SummonNtfChopper">
            <summary>
            Summons the NTF chopper.
            </summary>
        </member>
        <member name="T:Exiled.API.Enums.RoomType">
            <summary>
            Unique identifier for the different types of rooms.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.RoomType.Unknown">
            <summary>
            Unknown Room Type.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.RoomType.LczArmory">
            <summary>
            Lower Containment Armory.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.RoomType.LczCurve">
            <summary>
            Lower Containment L-Shaped Room.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.RoomType.LczStraight">
            <summary>
            Lower Containment |-Shaped Room.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.RoomType.Lcz012">
            <summary>
            Lower Containment SCP 012 Room.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.RoomType.Lcz914">
            <summary>
            Lower Containment SCP 914 Room.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.RoomType.LczCrossing">
            <summary>
            Lower Containment X-Shaped Room.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.RoomType.LczTCross">
            <summary>
            Lower Containment T-Shaped Room.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.RoomType.LczCafe">
            <summary>
            Lower Containment Cafe Room.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.RoomType.LczPlants">
            <summary>
            Lower Containment T-Shaped Plants Room.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.RoomType.LczToilets">
            <summary>
            Lower Containment Toilets Room.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.RoomType.LczAirlock">
            <summary>
            Lower Containment Airlock Room.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.RoomType.Lcz173">
            <summary>
            Lower Containment SCP 173 Room.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.RoomType.LczClassDSpawn">
            <summary>
            Lower Containment Class D Spawn Room.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.RoomType.LczChkpB">
            <summary>
            Lower Containment Checkpoint B Room.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.RoomType.LczGlassBox">
            <summary>
            Lower Containment Glass Box Room.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.RoomType.LczChkpA">
            <summary>
            Lower Containment Checkpoint A Room.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.RoomType.Hcz079">
            <summary>
            Heavy Containment SCP 079 Room.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.RoomType.HczEzCheckpoint">
            <summary>
            Heavy Containment Entrance Checkpoint Room.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.RoomType.HczArmory">
            <summary>
            Heavy Containment T-Shaped Armory Room.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.RoomType.Hcz939">
            <summary>
            Heavy Containment SCP 939 Room.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.RoomType.HczHid">
            <summary>
            Heavy Containment HID-Spawn Room.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.RoomType.Hcz049">
            <summary>
            Heavy Containment SCP 049 Room.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.RoomType.HczChkpA">
            <summary>
            Heavy Containment Checkpoint A Room.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.RoomType.HczCrossing">
            <summary>
            Heavy Containment X-Shaped Room.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.RoomType.Hcz106">
            <summary>
            Heavy Containment SCP 106 Room.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.RoomType.HczNuke">
            <summary>
            Heavy Containment Nuke Room.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.RoomType.HczTesla">
            <summary>
            Heavy Containment Tesla Room.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.RoomType.HczServers">
            <summary>
            Heavy Containment Servers Room.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.RoomType.HczChkpB">
            <summary>
            Heavy Containment Checkpoint B Room.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.RoomType.HczTCross">
            <summary>
            Heavy Containment T-Shaped Room.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.RoomType.HczCurve">
            <summary>
            Heavy Containment L-Shaped Room.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.RoomType.Hcz096">
            <summary>
            Heavy Containment SCP 096 Room.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.RoomType.EzVent">
            <summary>
            Entrance Red Vent Room.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.RoomType.EzIntercom">
            <summary>
            Entrance Intercom Room.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.RoomType.EzGateA">
            <summary>
            Entrance Gate A Room.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.RoomType.EzDownstairsPcs">
            <summary>
            Entrance PC Room With Downstairs.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.RoomType.EzCurve">
            <summary>
            Entrance L-Shaped Room.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.RoomType.EzPcs">
            <summary>
            Entrance PC Room.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.RoomType.EzCrossing">
            <summary>
            Entrance X-Shaped Room.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.RoomType.EzCollapsedTunnel">
            <summary>
            Entrance Red Collapsed Tunnel Room.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.RoomType.EzConference">
            <summary>
            Entrance |-Shaped Dr.L Room.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.RoomType.EzStraight">
            <summary>
            Entrance |-Shaped Room
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.RoomType.EzCafeteria">
            <summary>
            Entrance Cafeteria Room.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.RoomType.EzUpstairsPcs">
            <summary>
            Entrance PC Room With Upstairs.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.RoomType.EzGateB">
            <summary>
            Entrance Gate B Room.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.RoomType.EzShelter">
            <summary>
            Entrance Shelter Room.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.RoomType.Surface">
            <summary>
            The Surface.
            </summary>
        </member>
        <member name="T:Exiled.API.Enums.Side">
            <summary>
            In which side a certain <see cref="T:RoleType"/> belongs.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.Side.Scp">
            <summary>
            The same as <see cref="F:Team.SCP"/>.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.Side.Mtf">
            <summary>
            Mobile Task Forces team.
            Contains <see cref="F:RoleType.Scientist"/>, <see cref="F:RoleType.FacilityGuard"/>, <see cref="F:RoleType.NtfCadet"/>, <see cref="F:RoleType.NtfLieutenant"/>,
            <see cref="F:RoleType.NtfCommander"/> and <see cref="F:RoleType.NtfScientist"/>.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.Side.ChaosInsurgency">
            <summary>
            Chaos Insurgency team.
            Contains <see cref="F:RoleType.ClassD"/> and <see cref="F:RoleType.ChaosInsurgency"/>.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.Side.Tutorial">
            <summary>
            <see cref="F:Team.TUT"/>.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.Side.None">
            <summary>
            <see cref="F:Team.RIP"/>.
            </summary>
        </member>
        <member name="T:Exiled.API.Enums.ZoneType">
            <summary>
            Facility zone types.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.ZoneType.Surface">
            <summary>
            The Surface Zone.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.ZoneType.Entrance">
            <summary>
            The Entrance Zone.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.ZoneType.HeavyContainment">
            <summary>
            The Heavy Containment Zone.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.ZoneType.LightContainment">
            <summary>
            The Light Containment Zone.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.ZoneType.Unspecified">
            <summary>
            An unknown zone.
            </summary>
        </member>
        <member name="T:Exiled.API.Extensions.Item">
            <summary>
            A set of extensions for <see cref="T:ItemType"/>.
            </summary>
        </member>
        <member name="M:Exiled.API.Extensions.Item.Spawn(ItemType,System.Single,UnityEngine.Vector3,UnityEngine.Quaternion,System.Int32,System.Int32,System.Int32)">
            <summary>
            Spawns an <see cref="T:ItemType"/> in a desired <see cref="T:UnityEngine.Vector3"/> position.
            </summary>
            <param name="itemType">The type of the item to be spawned.</param>
            <param name="durability">The durability (or ammo, depends on the weapon) of the item.</param>
            <param name="position">Where the item will be spawned.</param>
            <param name="rotation">The rotation. We recommend you to use <see cref="M:UnityEngine.Quaternion.Euler(System.Single,System.Single,System.Single)"/>.</param>
            <param name="sight">The sight the weapon will have (0 is nothing, 1 is the first sight available in the weapon manager, and so on).</param>
            <param name="barrel">The barrel of the weapon (0 is no custom barrel, 1 is the first barrel available, and so on).</param>
            <param name="other">Other attachments like flashlight, laser or ammo counter.</param>
            <returns>Returns the spawned <see cref="T:Pickup"/>.</returns>
        </member>
        <member name="M:Exiled.API.Extensions.Item.SetWeaponAmmo(Inventory.SyncListItemInfo,Inventory.SyncItemInfo,System.Int32)">
            <summary>
            Set the ammo of an <see cref="T:Inventory.SyncItemInfo">item</see>.
            </summary>
            <param name="list">The list of items.</param>
            <param name="weapon">The weapon to be changed.</param>
            <param name="amount">The ammo amount.</param>
        </member>
        <member name="M:Exiled.API.Extensions.Item.SetWeaponAmmo(Exiled.API.Features.Player,Inventory.SyncItemInfo,System.Int32)">
            <summary>
            Set the ammo value of an <see cref="T:Inventory.SyncItemInfo"/>.
            </summary>
            <param name="player">The player instance.</param>
            <param name="weapon">The weapon to be changed.</param>
            <param name="amount">The ammo amount.</param>
        </member>
        <member name="M:Exiled.API.Extensions.Item.GetWeaponAmmo(Inventory.SyncItemInfo)">
            <summary>
            Get the ammo of an <see cref="T:Inventory.SyncItemInfo"/>.
            </summary>
            <param name="weapon">The weapon to be get.</param>
            <returns>Returns the weapon left ammo.</returns>
        </member>
        <member name="M:Exiled.API.Extensions.Item.IsAmmo(ItemType)">
            <summary>
            Check if an <see cref="T:ItemType">item</see> is an ammo.
            </summary>
            <param name="item">The item to be checked.</param>
            <returns>Returns whether the <see cref="T:ItemType"/> is an ammo or not.</returns>
        </member>
        <member name="M:Exiled.API.Extensions.Item.IsWeapon(ItemType,System.Boolean)">
            <summary>
            Check if an <see cref="T:ItemType">item</see> is a weapon.
            </summary>
            <param name="type">The item to be checked.</param>
            <param name="checkMicro">Indicates whether the MicroHID item should be taken into account or not.</param>
            <returns>Returns whether the <see cref="T:ItemType"/> is a weapon or not.</returns>
        </member>
        <member name="M:Exiled.API.Extensions.Item.IsSCP(ItemType)">
            <summary>
            Check if an <see cref="T:ItemType">item</see> is an SCP.
            </summary>
            <param name="type">The item to be checked.</param>
            <returns>Returns whether the <see cref="T:ItemType"/> is an SCP or not.</returns>
        </member>
        <member name="M:Exiled.API.Extensions.Item.IsThrowable(ItemType)">
            <summary>
            Check if an <see cref="T:ItemType">item</see> is a throwable item.
            </summary>
            <param name="type">The item to be checked.</param>
            <returns>Returns whether the <see cref="T:ItemType"/> is a throwable item or not.</returns>
        </member>
        <member name="M:Exiled.API.Extensions.Item.IsMedical(ItemType)">
            <summary>
            Check if an <see cref="T:ItemType">item</see> is a medical item.
            </summary>
            <param name="type">The item to be checked.</param>
            <returns>Returns whether the <see cref="T:ItemType"/> is a medical item or not.</returns>
        </member>
        <member name="M:Exiled.API.Extensions.Item.IsUtility(ItemType)">
            <summary>
            Check if an <see cref="T:ItemType">item</see> is a utility item.
            </summary>
            <param name="type">The item to be checked.</param>
            <returns>Returns whether the <see cref="T:ItemType"/> is an utilty item or not.</returns>
        </member>
        <member name="M:Exiled.API.Extensions.Item.IsKeycard(ItemType)">
            <summary>
            Check if an <see cref="T:ItemType">item</see> is a keycard.
            </summary>
            <param name="type">The item to be checked.</param>
            <returns>Returns whether the <see cref="T:ItemType"/> is a keycard or not.</returns>
        </member>
        <member name="T:Exiled.API.Extensions.Reflection">
            <summary>
            A set of extensions for <see cref="T:System.Type"/>.
            </summary>
        </member>
        <member name="M:Exiled.API.Extensions.Reflection.InvokeStaticMethod(System.Type,System.String,System.Object[])">
            <summary>
            Invoke a static method.
            </summary>
            <param name="type">The method type.</param>
            <param name="methodName">The method name.</param>
            <param name="param">The method parameters.</param>
        </member>
        <member name="M:Exiled.API.Extensions.Reflection.CopyProperties(System.Object,System.Object)">
            <summary>
            Copy all properties from the source class to the target one.
            </summary>
            <param name="target">The target object.</param>
            <param name="source">The source object to copy properties from.</param>
        </member>
        <member name="T:Exiled.API.Extensions.Role">
            <summary>
            A set of extensions for <see cref="T:RoleType"/>.
            </summary>
        </member>
        <member name="M:Exiled.API.Extensions.Role.GetColor(RoleType)">
            <summary>
            Get a <see cref="T:RoleType">role's</see> <see cref="T:UnityEngine.Color"/>.
            </summary>
            <param name="role">The <see cref="T:RoleType"/> to get the color of.</param>
            <returns>The <see cref="T:UnityEngine.Color"/> of the role.</returns>
        </member>
        <member name="M:Exiled.API.Extensions.Role.GetSide(RoleType)">
            <summary>
            Get a <see cref="T:RoleType">role's</see> <see cref="T:Exiled.API.Enums.Side"/>.
            </summary>
            <param name="role">The <see cref="T:RoleType"/> to check the side of.</param>
            <returns><see cref="T:Exiled.API.Enums.Side"/>.</returns>
        </member>
        <member name="M:Exiled.API.Extensions.Role.GetSide(Team)">
            <summary>
            Get a <see cref="T:Team">team's</see> <see cref="T:Exiled.API.Enums.Side"/>.
            </summary>
            <param name="team">The <see cref="T:Team"/> to get the <see cref="T:Exiled.API.Enums.Side"/> of.</param>
            <returns><see cref="T:Exiled.API.Enums.Side"/>.</returns>.
        </member>
        <member name="M:Exiled.API.Extensions.Role.GetTeam(RoleType)">
            <summary>
            Get the <see cref="T:Team"/> of the given <see cref="T:RoleType"/>.
            </summary>
            <param name="roleType">Role.</param>
            <returns><see cref="T:Team"/>.</returns>
        </member>
        <member name="T:Exiled.API.Extensions.String">
            <summary>
            A set of extensions for <see cref="T:System.String"/>.
            </summary>
        </member>
        <member name="M:Exiled.API.Extensions.String.GetDistance(System.String,System.String)">
            <summary>
            Compute the distance between two <see cref="T:System.String"/>.
            </summary>
            <param name="firstString">The first string to be compared.</param>
            <param name="secondString">The second string to be compared.</param>
            <returns>Returns the distance between the two strings.</returns>
        </member>
        <member name="M:Exiled.API.Extensions.String.ExtractCommand(System.String)">
            <summary>
            Extract command name and arguments from a <see cref="T:System.String"/>.
            </summary>
            <param name="commandLine">The <see cref="T:System.String"/> to extract from.</param>
            <returns>Returns a <see cref="T:System.ValueTuple"/> containing the exctracted command name and arguments.</returns>
        </member>
        <member name="M:Exiled.API.Extensions.String.ToSnakeCase(System.String,System.Boolean)">
            <summary>
            Converts a <see cref="T:System.String"/> to snake_case convention.
            </summary>
            <param name="str">The string to be converted.</param>
            <param name="shouldReplaceSpecialChars">Indicates whether special chars has to be replaced or not.</param>
            <returns>Returns the new snake_case string.</returns>
        </member>
        <member name="M:Exiled.API.Extensions.String.ToString``1(System.Collections.Generic.IEnumerable{``0},System.Boolean)">
            <summary>
            Converts an <see cref="T:System.Collections.Generic.IEnumerable`1"/> into a string.
            </summary>
            <typeparam name="T">The type of the IEnumerable.</typeparam>
            <param name="enumerable">The instance.</param>
            <param name="showIndex">Indicates whether the enumerator index should be shown or not.</param>
            <returns>Returns the converted <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</returns>
        </member>
        <member name="T:Exiled.API.Features.Badge">
            <summary>
            Represents the in-game badge.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Badge.#ctor(System.String,System.String,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.API.Features.Badge"/> struct.
            </summary>
            <param name="text">The badge text.</param>
            <param name="color">The badge color.</param>
            <param name="type">The badge type.</param>
            <param name="isGlobal">Indicates whether the badge is global or not.</param>
        </member>
        <member name="P:Exiled.API.Features.Badge.Text">
            <summary>
            Gets the badge text.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Badge.Color">
            <summary>
            Gets the badge color.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Badge.Type">
            <summary>
            Gets the badge type.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Badge.IsGlobal">
            <summary>
            Gets a value indicating whether the badge is global or not.
            </summary>
        </member>
        <member name="T:Exiled.API.Features.Broadcast">
            <summary>
            Useful class to save broadcast configs in a cleaner way.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Broadcast.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.API.Features.Broadcast"/> class.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Broadcast.#ctor(System.String,System.UInt16,System.Boolean,Broadcast.BroadcastFlags)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.API.Features.Broadcast"/> class.
            </summary>
            <param name="content"><inheritdoc cref="P:Exiled.API.Features.Broadcast.Content"/></param>
            <param name="duration"><inheritdoc cref="P:Exiled.API.Features.Broadcast.Duration"/></param>
            <param name="show"><inheritdoc cref="P:Exiled.API.Features.Broadcast.Show"/></param>
            <param name="type"><inheritdoc cref="P:Exiled.API.Features.Broadcast.Type"/></param>
        </member>
        <member name="P:Exiled.API.Features.Broadcast.Content">
            <summary>
            Gets or sets the broadcast content.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Broadcast.Duration">
            <summary>
            Gets or sets the broadcast duration.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Broadcast.Type">
            <summary>
            Gets or sets the broadcast type.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Broadcast.Show">
            <summary>
            Gets or sets a value indicating whether the broadcast should be shown or not.
            </summary>
        </member>
        <member name="T:Exiled.API.Features.Cassie">
            <summary>
            A set of tools to use in-game C.A.S.S.I.E more easily.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Cassie.Message(System.String,System.Boolean,System.Boolean)">
            <summary>
            Reproduce a C.A.S.S.I.E message.
            </summary>
            <param name="message">The message to be reproduced.</param>
            <param name="isHeld">Indicates whether C.A.S.S.I.E has to hold the message.</param>
            <param name="isNoisy">Indicates whether C.A.S.S.I.E has to make noises or not during the message.</param>
        </member>
        <member name="M:Exiled.API.Features.Cassie.DelayedMessage(System.String,System.Single,System.Boolean,System.Boolean)">
            <summary>
            Reproduce a C.A.S.S.I.E message after a certain amount of seconds.
            </summary>
            <param name="message">The message to be reproduced.</param>
            <param name="delay">The seconds that have to pass, before reproducing the message.</param>
            <param name="isHeld">Indicates whether C.A.S.S.I.E has to hold the message.</param>
            <param name="isNoisy">Indicates whether C.A.S.S.I.E has to make noises or not during the message.</param>
        </member>
        <member name="T:Exiled.API.Features.Log">
            <summary>
            A set of tools to print messages on the server console.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Log.Info(System.Object)">
            <summary>
            Sends a <see cref="F:Discord.LogLevel.Info"/> level messages to the game console.
            </summary>
            <param name="message">The message to be sent.</param>
        </member>
        <member name="M:Exiled.API.Features.Log.Debug(System.Object,System.Boolean)">
            <summary>
            Sends a <see cref="F:Discord.LogLevel.Debug"/> level messages to the game console.
            Server must have exiled_debug config enabled.
            </summary>
            <param name="message">The message to be sent.</param>
            <param name="canBeSent">Indicates whether the log can be sent or not.</param>
        </member>
        <member name="M:Exiled.API.Features.Log.Warn(System.Object)">
            <summary>
            Sends a <see cref="F:Discord.LogLevel.Warn"/> level messages to the game console.
            </summary>
            <param name="message">The message to be sent.</param>
        </member>
        <member name="M:Exiled.API.Features.Log.Error(System.Object)">
            <summary>
            Sends a <see cref="F:Discord.LogLevel.Error"/> level messages to the game console.
            This should be used to send errors only.
            It's recommended to send any messages in the catch block of a try/catch as errors with the exception string.
            </summary>
            <param name="message">The message to be sent.</param>
        </member>
        <member name="M:Exiled.API.Features.Log.Send(System.Object,Discord.LogLevel,System.ConsoleColor)">
            <summary>
            Sends a log message to the game console.
            </summary>
            <param name="message">The message to be sent.</param>
            <param name="level">The message level of importance.</param>
            <param name="color">The message color.</param>
        </member>
        <member name="M:Exiled.API.Features.Log.SendRaw(System.Object,System.ConsoleColor)">
            <summary>
            Sends a raw log message to the game console.
            </summary>
            <param name="message">The message to be sent.</param>
            <param name="color">The message color.</param>
        </member>
        <member name="T:Exiled.API.Features.Map">
            <summary>
            A set of tools to handle the in-game map more easily.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Map.IsLCZDecontaminated">
            <summary>
            Gets a value indicating whether the decontamination has been completed or not.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Map.ActivatedGenerators">
            <summary>
            Gets the number of activated generators.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Map.Cameras">
            <summary>
            Gets all cameras of SCP-079.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Map.Rooms">
            <summary>
            Gets all <see cref="T:Exiled.API.Features.Room"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Map.Doors">
            <summary>
            Gets all <see cref="T:Door"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Map.Lifts">
            <summary>
            Gets all <see cref="T:Lift"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Map.TeslaGates">
            <summary>
            Gets all <see cref="T:TeslaGate"/>.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Map.Broadcast(System.UInt16,System.String,Broadcast.BroadcastFlags)">
            <summary>
            Broadcasts a message to all players.
            </summary>
            <param name="duration">The duration in seconds.</param>
            <param name="message">The message that will be broadcast (supports Unity Rich Text formatting).</param>
            <param name="type">The broadcast type.</param>
        </member>
        <member name="M:Exiled.API.Features.Map.ClearBroadcasts">
            <summary>
            Clears all players' broadcasts.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Map.GetRandomSpawnPoint(RoleType)">
            <summary>
            Gets a random spawn point of a <see cref="T:RoleType"/>.
            </summary>
            <param name="roleType">The <see cref="T:RoleType"/> to get the spawn point from.</param>
            <returns>Returns the spawn point <see cref="T:UnityEngine.Vector3"/>.</returns>
        </member>
        <member name="M:Exiled.API.Features.Map.StartDecontamination">
            <summary>
            Starts the Decontamination process.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Map.TurnOffAllLights(System.Single,System.Boolean)">
            <summary>
            Turns off all lights of the facility (except for the entrance zone).
            </summary>
            <param name="duration">The duration of the blackout.</param>
            <param name="isHeavyContainmentZoneOnly">Indicates whether only the heavy containment zone lights have to be turned off or not.</param>
        </member>
        <member name="M:Exiled.API.Features.Map.ClearCache">
            <summary>
                Clears the lazy loading game object cache.
            </summary>
        </member>
        <member name="T:Exiled.API.Features.Paths">
            <summary>
            A set of useful paths.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Paths.AppData">
            <summary>
            Gets AppData path.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Paths.ManagedAssemblies">
            <summary>
            Gets managed assemblies directory path.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Paths.Exiled">
            <summary>
            Gets or sets exiled directory path.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Paths.Plugins">
            <summary>
            Gets or sets plugins path.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Paths.Dependencies">
            <summary>
            Gets or sets Dependencies directory path.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Paths.Configs">
            <summary>
            Gets or sets configs path.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Paths.Config">
            <summary>
            Gets or sets configs path.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Paths.Log">
            <summary>
            Gets or sets logs path.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Paths.Reload(System.String)">
            <summary>
            Reloads all paths.
            </summary>
            <param name="rootDirectoryName">The new root directory name.</param>
        </member>
        <member name="T:Exiled.API.Features.Player">
            <summary>
            Represents the in-game player, by encapsulating a <see cref="P:Exiled.API.Features.Player.ReferenceHub"/>.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Player.#ctor(ReferenceHub)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.API.Features.Player"/> class.
            </summary>
            <param name="referenceHub">The <see cref="P:Exiled.API.Features.Player.ReferenceHub"/> of the player to be encapsulated.</param>
        </member>
        <member name="M:Exiled.API.Features.Player.#ctor(UnityEngine.GameObject)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.API.Features.Player"/> class.
            </summary>
            <param name="gameObject">The <see cref="P:Exiled.API.Features.Player.GameObject"/> of the player.</param>
        </member>
        <member name="P:Exiled.API.Features.Player.Dictionary">
            <summary>
            Gets a <see cref="T:System.Collections.Generic.Dictionary`2"/> containing all <see cref="T:Exiled.API.Features.Player"/> on the server.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.List">
            <summary>
            Gets a list of all <see cref="T:Exiled.API.Features.Player"/>'s on the server.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.UserIdsCache">
            <summary>
            Gets a <see cref="T:System.Collections.Generic.Dictionary`2"/> containing cached <see cref="T:Exiled.API.Features.Player"/> and their user ids.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.IdsCache">
            <summary>
            Gets a <see cref="T:System.Collections.Generic.Dictionary`2"/> containing cached <see cref="T:Exiled.API.Features.Player"/> and their ids.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.ReferenceHub">
            <summary>
            Gets the encapsulated <see cref="P:Exiled.API.Features.Player.ReferenceHub"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.GameObject">
            <summary>
            Gets the encapsulated <see cref="T:UnityEngine.GameObject"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.Ammo">
            <summary>
            Gets the player's ammo.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.HintDisplay">
            <summary>
            Gets the HintDisplay of the player.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.Inventory">
            <summary>
            Gets the player's inventory.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.PlayerCamera">
            <summary>
            Gets the encapsulated <see cref="P:Exiled.API.Features.Player.ReferenceHub"/>'s PlayerCamera.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.CameraTransform">
            <summary>
            Gets the encapsulated <see cref="P:Exiled.API.Features.Player.ReferenceHub"/>'s PlayerCamera.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.GrenadeManager">
            <summary>
            Gets the player's grenade manager.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.Id">
            <summary>
            Gets or sets the player's id.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.UserId">
            <summary>
            Gets the player's user id.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.CustomUserId">
            <summary>
            Gets or sets the player's custom user id.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.RawUserId">
            <summary>
            Gets the player's user id without the authentication.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.AuthenticationToken">
            <summary>
            Gets the player's authentication token.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.AuthenticationType">
            <inheritdoc cref="T:Exiled.API.Enums.AuthenticationType"/>
        </member>
        <member name="P:Exiled.API.Features.Player.DisplayNickname">
            <summary>
            Gets or sets the player's display nickname.
            May be null.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.Nickname">
            <summary>
            Gets the player's nickname.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.IsInvisible">
            <summary>
            Gets or sets a value indicating whether the player is invisible or not.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.DoNotTrack">
            <summary>
            Gets a value indicating whether the players can be tracked or not.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.TargetGhosts">
            <summary>
            Gets a list of player ids who can't see the player.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.IsOverwatchEnabled">
            <summary>
            Gets or sets a value indicating whether the player's overwatch is enabled or not.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.CufferId">
            <summary>
            Gets or sets a value indicating the cuffer <see cref="T:Exiled.API.Features.Player"/> id.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.Position">
            <summary>
            Gets or sets the player's position.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.Rotations">
            <summary>
            Gets or sets the player's rotations.
            </summary>
            <returns>Returns a <see cref="T:UnityEngine.Vector2"/>, representing the directions he's looking at.</returns>
        </member>
        <member name="P:Exiled.API.Features.Player.Rotation">
            <summary>
            Gets or sets the player's rotation.
            </summary>
            <returns>Returns the direction he's looking at, useful for Raycasts.</returns>
        </member>
        <member name="P:Exiled.API.Features.Player.Team">
            <summary>
            Gets the player's <see cref="P:Exiled.API.Features.Player.Team"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.Role">
            <summary>
            Gets or sets the player's <see cref="T:RoleType"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.RoleColor">
            <summary>
            Gets the <see cref="T:UnityEngine.Color"/> of the player's <see cref="T:RoleType">role</see>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.IsCuffed">
            <summary>
            Gets a value indicating whether the player is cuffed or not.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.IsReloading">
            <summary>
            Gets a value indicating whether the player is reloading or not.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.IsZooming">
            <summary>
            Gets a value indicating whether the player is zooming or not.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.IPAddress">
            <summary>
            Gets or sets the player's IP address.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.NoClipEnabled">
            <summary>
            Gets or sets a value indicating whether or not the <see cref="T:Exiled.API.Features.Player"/> has No-clip enabled.
            </summary>
            <returns><see cref="T:System.Boolean"/> indicating status.</returns>
        </member>
        <member name="P:Exiled.API.Features.Player.CommandSender">
            <summary>
            Gets the player's command sender instance.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.Sender">
            <summary>
            Gets the player's command sender instance.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.Connection">
            <summary>
            Gets player's <see cref="T:Mirror.NetworkConnection"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.IsHost">
            <summary>
            Gets a value indicating whether the player is the host or not.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.IsAlive">
            <summary>
            Gets a value indicating whether the player is alive or not.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.IsDead">
            <summary>
            Gets a value indicating whether the player is dead or not.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.Camera">
            <summary>
            Gets or sets the camera of SCP-079.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.IsNTF">
            <summary>
            Gets a value indicating whether the player's role type is any NTF type <see cref="P:Exiled.API.Features.Player.ReferenceHub"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.Side">
            <summary>
            Gets the player's <see cref="T:Exiled.API.Enums.Side"/> they're currently in.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.IsFriendlyFireEnabled">
            <summary>
            Gets or sets a value indicating whether the player friendly fire is enabled or not.
            This only isAllowed to deal friendly fire damage, not take friendly fire damage.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.Scale">
            <summary>
            Gets or sets the player's scale.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.IsBypassModeEnabled">
            <summary>
            Gets or sets a value indicating whether the player's bypass mode is enabled or not.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.IsMuted">
            <summary>
            Gets or sets a value indicating whether the player is muted or not.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.IsIntercomMuted">
            <summary>
            Gets or sets a value indicating whether the player is intercom muted or not.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.IsGodModeEnabled">
            <summary>
            Gets or sets a value indicating whether the player's godmode is enabled or not.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.Health">
            <summary>
            Gets or sets the player's health.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.MaxHealth">
            <summary>
            Gets or sets the player's maximum health.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.AdrenalineHealth">
            <summary>
            Gets or sets the player's adrenaline health.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.MaxAdrenalineHealth">
            <summary>
            Gets or sets the player's maximum adrenaline health.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.CurrentItem">
            <summary>
            Gets or sets the item in the player's hand, returns the default value if empty.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.CurrentItemIndex">
            <summary>
            Gets the index of the current item in hand.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.Abilities">
            <summary>
            Gets or sets the abilities of SCP-079. Can be null.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.Levels">
            <summary>
            Gets or sets the levels of SCP-079. Can be null.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.Speaker">
            <summary>
            Gets or sets the speaker of SCP-079. Can be null.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.LockedDoors">
            <summary>
            Gets or sets the SCP-079 locked doors <see cref="T:Mirror.SyncListString"/>. Can be null.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.Experience">
            <summary>
            Gets or sets the experience of SCP-079.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.Stamina">
            <summary>
            Gets the <see cref="P:Exiled.API.Features.Player.Stamina"/> class.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.Level">
            <summary>
            Gets or sets the level of SCP-079.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.MaxEnergy">
            <summary>
            Gets or sets the SCP-079 max energy.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.Energy">
            <summary>
            Gets or sets the energy of SCP-079.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.IsStaffBypassEnabled">
            <summary>
            Gets a value indicating whether the staff bypass is enabled or not.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.GroupName">
            <summary>
            Gets or sets the player's group name.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.CurrentRoom">
            <summary>
            Gets the current room the player is in.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.Group">
            <summary>
            Gets or sets the player's group.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.RankColor">
            <summary>
            Gets or sets the player's rank color.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.RankName">
            <summary>
            Gets or sets the player's rank name.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.GlobalBadge">
            <summary>
            Gets the global badge of the player, can be null if none.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.BadgeHidden">
            <summary>
            Gets or sets a value indicating whether or not the player's badge is hidden.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Player.Get(Team)">
            <summary>
            Gets a <see cref="T:Exiled.API.Features.Player"/> <see cref="T:System.Collections.Generic.IEnumerable`1"/> filtered by team.
            </summary>
            <param name="team">The players' team.</param>
            <returns>Returns the filtered <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</returns>
        </member>
        <member name="M:Exiled.API.Features.Player.Get(RoleType)">
            <summary>
            Gets a <see cref="T:Exiled.API.Features.Player"/> <see cref="T:System.Collections.Generic.IEnumerable`1"/> filtered by role.
            </summary>
            <param name="role">The players' role.</param>
            <returns>Returns the filtered <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</returns>
        </member>
        <member name="M:Exiled.API.Features.Player.Get(ReferenceHub)">
            <summary>
            Gets the Player belonging to the ReferenceHub, if any.
            </summary>
            <param name="referenceHub">The player's <see cref="P:Exiled.API.Features.Player.ReferenceHub"/>.</param>
            <returns>Returns a player or null if not found.</returns>
        </member>
        <member name="M:Exiled.API.Features.Player.Get(UnityEngine.GameObject)">
            <summary>
            Gets the Player belonging to the GameObject, if any.
            </summary>
            <param name="gameObject">The player's <see cref="T:UnityEngine.GameObject"/>.</param>
            <returns>Returns a player or null if not found.</returns>
        </member>
        <member name="M:Exiled.API.Features.Player.Get(System.Int32)">
            <summary>
            Gets the player belonging to the player with the specified id.
            </summary>
            <param name="id">The player id.</param>
            <returns>Returns the player found or null if not found.</returns>
        </member>
        <member name="M:Exiled.API.Features.Player.Get(System.String)">
            <summary>
            Gets the player by his identifier.
            </summary>
            <param name="args">The player's nickname, steamID64 or Discord ID.</param>
            <returns>Returns the player found or null if not found.</returns>
        </member>
        <member name="M:Exiled.API.Features.Player.GetCameraById(System.UInt16)">
            <summary>
            Gets the camera with the given ID.
            </summary>
            <param name="cameraId">The camera id to be searched for.</param>
            <returns><see cref="T:Camera079"/>.</returns>
        </member>
        <member name="M:Exiled.API.Features.Player.SetCamera(System.UInt16)">
            <summary>
            Sets the SCP-079 camera, if the player is SCP-079.
            </summary>
            <param name="cameraId">Camera ID.</param>
        </member>
        <member name="M:Exiled.API.Features.Player.SetRank(System.String,UserGroup)">
            <summary>
            Sets the player's rank.
            </summary>
            <param name="name">The rank name to be set.</param>
            <param name="group">The group to be set.</param>
        </member>
        <member name="M:Exiled.API.Features.Player.Handcuff(Exiled.API.Features.Player)">
            <summary>
            Handcuff the player.
            </summary>
            <param name="cuffer">The cuffer player.</param>
        </member>
        <member name="M:Exiled.API.Features.Player.SetRole(RoleType,System.Boolean,System.Boolean)">
            <summary>
            Sets the player's <see cref="T:RoleType"/>.
            </summary>
            <param name="newRole">The new <see cref="T:RoleType"/> to be set.</param>
            <param name="lite">Indicates whether it should preserve the position and inventory after changing the role or not.</param>
            <param name="isEscaped">Indicates whether the player is escaped or not.</param>
        </member>
        <member name="M:Exiled.API.Features.Player.DropItem(Inventory.SyncItemInfo)">
            <summary>
            Drops an item from the player's inventory.
            </summary>
            <param name="item">The item to be dropped.</param>
        </member>
        <member name="M:Exiled.API.Features.Player.RemoveItem(Inventory.SyncItemInfo)">
            <summary>
            Removes an item from the player's inventory.
            </summary>
            <param name="item">The item to be removed.</param>
        </member>
        <member name="M:Exiled.API.Features.Player.RemoveItem">
            <summary>
            Removes the held item from the player's inventory.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Player.SendConsoleMessage(System.String,System.String)">
            <summary>
            Sends a console message to the player's console.
            </summary>
            <param name="message">The message to be sent.</param>
            <param name="color">The message color.</param>
        </member>
        <member name="M:Exiled.API.Features.Player.SendConsoleMessage(Exiled.API.Features.Player,System.String,System.String)">
            <summary>
            Sends a console message to a <see cref="T:Exiled.API.Features.Player"/>.
            </summary>
            <param name="target">The message target.</param>
            <param name="message">The message to be sent.</param>
            <param name="color">The message color.</param>
        </member>
        <member name="M:Exiled.API.Features.Player.Disconnect(System.String)">
            <summary>
            Disconnects a <see cref="P:Exiled.API.Features.Player.ReferenceHub">player</see>.
            </summary>
            <param name="reason">The disconnection reason.</param>
        </member>
        <member name="M:Exiled.API.Features.Player.Hurt(System.Single,DamageTypes.DamageType,System.String,System.Int32)">
            <summary>
            Hurts the player.
            </summary>
            <param name="damage">The damage to be inflicted.</param>
            <param name="damageType">The damage type.</param>
            <param name="attackerName">The attacker name.</param>
            <param name="attackerId">The attacker player id.</param>
        </member>
        <member name="M:Exiled.API.Features.Player.Hurt(System.Single,Exiled.API.Features.Player,DamageTypes.DamageType)">
            <summary>
            Hurts the player.
            </summary>
            <param name="damage">The damage to be inflicted.</param>
            <param name="attacker">The attacker.</param>
            <param name="damageType">The damage type.</param>
        </member>
        <member name="M:Exiled.API.Features.Player.Kill(DamageTypes.DamageType)">
            <summary>
            Kills the player.
            </summary>
            <param name="damageType">The <see cref="T:DamageTypes.DamageType"/> that will kill the player.</param>
        </member>
        <member name="M:Exiled.API.Features.Player.Ban(System.Int32,System.String,System.String)">
            <summary>
            Bans a the player.
            </summary>
            <param name="duration">The ban duration.</param>
            <param name="reason">The ban reason.</param>
            <param name="issuer">The ban issuer nickname.</param>
        </member>
        <member name="M:Exiled.API.Features.Player.Kick(System.String,System.String)">
            <summary>
            Kicks the player.
            </summary>
            <param name="reason">The kick reason.</param>
            <param name="issuer">The kick issuer nickname.</param>
        </member>
        <member name="M:Exiled.API.Features.Player.BlinkTag">
            <summary>
            Blink the player's tag.
            </summary>
            <returns>Used to wait.</returns>
        </member>
        <member name="M:Exiled.API.Features.Player.RemoteAdminMessage(System.String,System.Boolean,System.String)">
            <summary>
            Sends a message to the player's Remote Admin console.
            </summary>
            <param name="message">The message to be sent.</param>
            <param name="success">Indicates whether the message should be highlighted as success or not.</param>
            <param name="pluginName">The plugin name.</param>
        </member>
        <member name="M:Exiled.API.Features.Player.Broadcast(System.UInt16,System.String,Broadcast.BroadcastFlags)">
            <summary>
            A simple broadcast to a <see cref="P:Exiled.API.Features.Player.ReferenceHub"/>. Doesn't get logged to the console and can be monospaced.
            </summary>
            <param name="duration">The broadcast duration.</param>
            <param name="message">The message to be broadcasted.</param>
            <param name="type">The broadcast type.</param>
        </member>
        <member name="M:Exiled.API.Features.Player.ClearBroadcasts">
            <summary>
            Clears the player's brodcast. Doesn't get logged to the console.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Player.AddItem(ItemType)">
            <summary>
            Add an item of the specified type with default durability(ammo/charge) and no mods to the player's inventory.
            </summary>
            <param name="itemType">The item to be added.</param>
        </member>
        <member name="M:Exiled.API.Features.Player.AddItem(Inventory.SyncItemInfo)">
            <summary>
            Add an item to the player's inventory.
            </summary>
            <param name="item">The item to be added.</param>
        </member>
        <member name="M:Exiled.API.Features.Player.ResetInventory(System.Collections.Generic.List{ItemType})">
            <summary>
            Resets the player's inventory to the provided list of items, clearing any items it already possess.
            </summary>
            <param name="newItems">The new items that have to be added to the inventory.</param>
        </member>
        <member name="M:Exiled.API.Features.Player.ResetInventory(System.Collections.Generic.List{Inventory.SyncItemInfo})">
            <summary>
            Resets the player's inventory to the provided list of items, clearing any items it already possess.
            </summary>
            <param name="newItems">The new items that have to be added to the inventory.</param>
        </member>
        <member name="M:Exiled.API.Features.Player.ClearInventory">
            <summary>
            Clears the player's inventory.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Player.SetAmmo(Exiled.API.Enums.AmmoType,System.UInt32)">
            <summary>
            Sets the amount of a specified <see cref="T:Exiled.API.Enums.AmmoType">ammo type</see>.
            </summary>
            <param name="ammoType">The <see cref="T:Exiled.API.Enums.AmmoType"/> to be set.</param>
            <param name="amount">The amount of ammo to be set.</param>
        </member>
        <member name="M:Exiled.API.Features.Player.GetAmmo(Exiled.API.Enums.AmmoType)">
            <summary>
            Gets the amount of a specified <see cref="T:Exiled.API.Enums.AmmoType"/>.
            </summary>
            <param name="ammoType">The <see cref="T:Exiled.API.Enums.AmmoType"/> to get the amount from.</param>
            <returns>Returns the amount of the chosen <see cref="T:Exiled.API.Enums.AmmoType"/>.</returns>
        </member>
        <member name="M:Exiled.API.Features.Player.ShowHint(System.String,System.Single)">
            <summary>
            Simple way to show a hint to the player.
            </summary>
            <param name="message">The message to be shown.</param>
            <param name="duration">The duration the text will be on screen.</param>
        </member>
        <member name="M:Exiled.API.Features.Player.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Exiled.API.Features.Plugin`1">
            <summary>
            Expose how a plugin has to be made.
            </summary>
            <typeparam name="TConfig">The config type.</typeparam>
        </member>
        <member name="M:Exiled.API.Features.Plugin`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.API.Features.Plugin`1"/> class.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Plugin`1.Assembly">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.API.Features.Plugin`1.Name">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.API.Features.Plugin`1.Prefix">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.API.Features.Plugin`1.Author">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.API.Features.Plugin`1.Priority">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.API.Features.Plugin`1.Version">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.API.Features.Plugin`1.RequiredExiledVersion">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.API.Features.Plugin`1.Commands">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.API.Features.Plugin`1.Config">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.API.Features.Plugin`1.OnEnabled">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.API.Features.Plugin`1.OnDisabled">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.API.Features.Plugin`1.OnReloaded">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.API.Features.Plugin`1.OnRegisteringCommands">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.API.Features.Plugin`1.OnUnregisteringCommands">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.API.Features.Plugin`1.CompareTo(Exiled.API.Interfaces.IPlugin{Exiled.API.Interfaces.IConfig})">
            <inheritdoc/>
        </member>
        <member name="T:Exiled.API.Features.Respawn">
            <summary>
            A set of tools to handle team respawns more easily.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Respawn.Controller">
            <summary>
            Gets the actual <see cref="T:Respawning.RespawnEffectsController"/>.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Respawn.PlayEffect(System.Byte)">
            <summary>
            Play an effect when a certain class spawns.
            </summary>
            <param name="effect">The effect to be played.</param>
        </member>
        <member name="M:Exiled.API.Features.Respawn.PlayEffect(Exiled.API.Enums.RespawnEffectType)">
            <summary>
            Play an effect when a certain class spawns.
            </summary>
            <param name="effect">The effect to be played.</param>
        </member>
        <member name="M:Exiled.API.Features.Respawn.PlayEffects(System.Byte[])">
            <summary>
            Play effects when a certain class spawns.
            </summary>
            <param name="effects">The effects to be played.</param>
        </member>
        <member name="M:Exiled.API.Features.Respawn.PlayEffects(Exiled.API.Enums.RespawnEffectType[])">
            <summary>
            Play effects when a certain class spawns.
            </summary>
            <param name="effects">The effects to be played.</param>
        </member>
        <member name="M:Exiled.API.Features.Respawn.SummonNtfChopper">
            <summary>
            Summons the NTF chopper.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Respawn.SummonChaosInsurgencyVan(System.Boolean)">
            <summary>
            Summons the <see cref="F:RoleType.ChaosInsurgency"/> van.
            </summary>
            <param name="playMusic">Whether or not to play the Chaos Insurgency spawn music.</param>
        </member>
        <member name="T:Exiled.API.Features.Room">
            <summary>
            The in-game room.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Room.#ctor(System.String,UnityEngine.Transform,UnityEngine.Vector3)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.API.Features.Room"/> class.
            </summary>
            <param name="name">The room name.</param>
            <param name="transform">The room transform.</param>
            <param name="position">The room position.</param>
        </member>
        <member name="P:Exiled.API.Features.Room.Name">
            <summary>
            Gets the <see cref="T:Exiled.API.Features.Room"/> name.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Room.Transform">
            <summary>
            Gets the <see cref="T:Exiled.API.Features.Room"/> <see cref="T:UnityEngine.Transform"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Room.Position">
            <summary>
            Gets the <see cref="T:Exiled.API.Features.Room"/> position.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Room.Zone">
            <summary>
            Gets the <see cref="T:Exiled.API.Enums.ZoneType"/> in which the room is located.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Room.Type">
            <summary>
            Gets the <see cref="T:Exiled.API.Enums.RoomType"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Room.Players">
            <summary>
            Gets a <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Exiled.API.Features.Player"/> in the <see cref="T:Exiled.API.Features.Room"/>.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Room.TurnOffLights(System.Single)">
            <summary>
            Flickers the room's lights off for a duration.
            </summary>
            <param name="duration">Duration in seconds.</param>
        </member>
        <member name="T:Exiled.API.Features.Round">
            <summary>
            A set of tools to handle the round more easily.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Round.ElapsedTime">
            <summary>
            Gets the time elapsed from the start of the round.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Round.StartedTime">
            <summary>
            Gets the start time of the round.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Round.IsStarted">
            <summary>
            Gets a value indicating whether the round is started or not.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Round.IsLocked">
            <summary>
            Gets or sets a value indicating whether the round is locked or not.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Round.IsLobbyLocked">
            <summary>
            Gets or sets a value indicating whether the lobby is locked or not.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Round.Restart">
            <summary>
            Restarts the round.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Round.Start">
            <summary>
            Start the round.
            </summary>
        </member>
        <member name="T:Exiled.API.Features.Scp096">
            <summary>
            Represents the general role of Scp096.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Scp096.MaxShield">
            <summary>
            Gets or Sets a value indicating the max shield amount Scp096 can have.
            </summary>
        </member>
        <member name="T:Exiled.API.Features.Scp914">
            <summary>
            A set of tools to use the Scp914 machine more easily.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Scp914.KnobStatus">
            <summary>
            Gets or sets SCP-914 <see cref="T:Scp914.Scp914Knob"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Scp914.Recipes">
            <summary>
            Gets or sets SCP-914 recipes.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Scp914.ConfigMode">
            <summary>
            Gets or sets SCP-914 config mode.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Scp914.IsWorking">
            <summary>
            Gets a value indicating whether the SCP-914 was activated and is currently processing items.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Scp914.IntakeBooth">
            <summary>
            Gets the intake booth <see cref="T:UnityEngine.Transform"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Scp914.OutputBooth">
            <summary>
             Gets the output booth <see cref="T:UnityEngine.Transform"/>.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Scp914.Start">
            <summary>
            Starts the SCP-914.
            </summary>
        </member>
        <member name="T:Exiled.API.Features.Server">
            <summary>
            A set of tools to work with the server code more easily .
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Server.Host">
            <summary>
            Gets the player's host of the server.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Server.Broadcast">
            <summary>
            Gets the cached <see cref="P:Exiled.API.Features.Server.Broadcast"/> component.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Server.BanPlayer">
            <summary>
            Gets the cached <see cref="P:Exiled.API.Features.Server.BanPlayer"/> component.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Server.SendSpawnMessage">
            <summary>
            Gets the cached <see cref="P:Exiled.API.Features.Server.SendSpawnMessage"/> <see cref="T:System.Reflection.MethodInfo"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Server.Name">
            <summary>
            Gets or sets the name of the server.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Server.Port">
            <summary>
            Gets or sets the port of the server.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Server.FriendlyFire">
            <summary>
            Gets or sets a value indicating whether friendly fire is enabled or not.
            </summary>
        </member>
        <member name="T:Exiled.API.Features.Warhead">
            <summary>
            A set of tools to work with the warhead code more easily.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Warhead.Controller">
            <summary>
            Gets the cached <see cref="T:AlphaWarheadController"/> component.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Warhead.SitePanel">
            <summary>
            Gets the cached <see cref="T:AlphaWarheadNukesitePanel"/> component.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Warhead.OutsitePanel">
            <summary>
            Gets the cached <see cref="T:AlphaWarheadOutsitePanel"/> component.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Warhead.LeverStatus">
            <summary>
            Gets or sets a value indicating whether the warhead lever is enabled or not.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Warhead.IsKeycardActivated">
            <summary>
            Gets or sets a value indicating whether the warhead has already been activated or not.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Warhead.IsDetonated">
            <summary>
            Gets a value indicating whether the warhead has already been detonated or not.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Warhead.IsInProgress">
            <summary>
            Gets a value indicating whether the warhead detonation is in progress or not.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Warhead.DetonationTimer">
            <summary>
            Gets or sets the warhead detonation timer.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Warhead.RealDetonationTimer">
            <summary>
            Gets the warhead real detonation timer.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Warhead.IsWarheadLocked">
            <summary>
            Gets or sets a value indicating whether the warhead can be disabled or not.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Warhead.IsLocked">
            <summary>
            Gets or sets a value indicating whether the warhead can be disabled or not.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Warhead.CanBeStarted">
            <summary>
            Gets a value indicating whether the warhead can be started or not.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Warhead.Start">
            <summary>
            Starts the warhead countdown.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Warhead.Stop">
            <summary>
            Stops the warhead.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Warhead.Detonate">
            <summary>
            Detonates the warhead.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Warhead.Shake">
            <summary>
            Shake all players, like if the warhead has been detonated.
            </summary>
        </member>
        <member name="T:Exiled.API.Interfaces.IConfig">
            <summary>
            Defines the contract for basic config features.
            </summary>
        </member>
        <member name="P:Exiled.API.Interfaces.IConfig.IsEnabled">
            <summary>
            Gets or sets a value indicating whether the plugin is enabled or not.
            </summary>
        </member>
        <member name="T:Exiled.API.Interfaces.IPlugin`1">
            <summary>
            Defines the contract for basic plugin features.
            </summary>
            <typeparam name="TConfig">The config type.</typeparam>
        </member>
        <member name="P:Exiled.API.Interfaces.IPlugin`1.Assembly">
            <summary>
            Gets the plugin assembly.
            </summary>
        </member>
        <member name="P:Exiled.API.Interfaces.IPlugin`1.Name">
            <summary>
            Gets the plugin name.
            </summary>
        </member>
        <member name="P:Exiled.API.Interfaces.IPlugin`1.Prefix">
            <summary>
            Gets the plugin prefix.
            </summary>
        </member>
        <member name="P:Exiled.API.Interfaces.IPlugin`1.Author">
            <summary>
            Gets the plugin author.
            </summary>
        </member>
        <member name="P:Exiled.API.Interfaces.IPlugin`1.Commands">
            <summary>
            Gets the plugin commands.
            </summary>
        </member>
        <member name="P:Exiled.API.Interfaces.IPlugin`1.Priority">
            <summary>
            Gets the plugin priority.
            Higher values mean higher priority and vice versa.
            </summary>
        </member>
        <member name="P:Exiled.API.Interfaces.IPlugin`1.Version">
            <summary>
            Gets the plugin version.
            </summary>
        </member>
        <member name="P:Exiled.API.Interfaces.IPlugin`1.RequiredExiledVersion">
            <summary>
            Gets the required version of Exiled to run the plugin without bugs or incompatibilities.
            </summary>
        </member>
        <member name="P:Exiled.API.Interfaces.IPlugin`1.Config">
            <summary>
            Gets the plugin config.
            </summary>
        </member>
        <member name="M:Exiled.API.Interfaces.IPlugin`1.OnEnabled">
            <summary>
            Fired after enabling the plugin.
            </summary>
        </member>
        <member name="M:Exiled.API.Interfaces.IPlugin`1.OnDisabled">
            <summary>
            Fired after disabling the plugin.
            </summary>
        </member>
        <member name="M:Exiled.API.Interfaces.IPlugin`1.OnReloaded">
            <summary>
            Fired after reloading the plugin.
            </summary>
        </member>
        <member name="M:Exiled.API.Interfaces.IPlugin`1.OnRegisteringCommands">
            <summary>
            Fired before registering commands.
            </summary>
        </member>
        <member name="M:Exiled.API.Interfaces.IPlugin`1.OnUnregisteringCommands">
            <summary>
            Fired before unregistering configs.
            </summary>
        </member>
    </members>
</doc>
