<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Exiled.Events</name>
    </assembly>
    <members>
        <member name="T:Exiled.Events.Commands.ReconnectRestart">
            <summary>
            The ReconnectRestart command.
            </summary>
        </member>
        <member name="P:Exiled.Events.Commands.ReconnectRestart.Command">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.Events.Commands.ReconnectRestart.Aliases">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.Events.Commands.ReconnectRestart.Description">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.Events.Commands.ReconnectRestart.Execute(System.ArraySegment{System.String},CommandSystem.ICommandSender,System.String@)">
            <inheritdoc/>
        </member>
        <member name="T:Exiled.Events.Commands.Reload.Configs">
            <summary>
            The reload configs command.
            </summary>
        </member>
        <member name="P:Exiled.Events.Commands.Reload.Configs.Command">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.Events.Commands.Reload.Configs.Aliases">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.Events.Commands.Reload.Configs.Description">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.Events.Commands.Reload.Configs.Execute(System.ArraySegment{System.String},CommandSystem.ICommandSender,System.String@)">
            <inheritdoc/>
        </member>
        <member name="T:Exiled.Events.Commands.Reload.GamePlay">
            <summary>
            The reload gameplay command.
            </summary>
        </member>
        <member name="P:Exiled.Events.Commands.Reload.GamePlay.Command">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.Events.Commands.Reload.GamePlay.Aliases">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.Events.Commands.Reload.GamePlay.Description">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.Events.Commands.Reload.GamePlay.Execute(System.ArraySegment{System.String},CommandSystem.ICommandSender,System.String@)">
            <inheritdoc/>
        </member>
        <member name="T:Exiled.Events.Commands.Reload.Plugins">
            <summary>
            The reload plugins command.
            </summary>
        </member>
        <member name="P:Exiled.Events.Commands.Reload.Plugins.Command">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.Events.Commands.Reload.Plugins.Aliases">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.Events.Commands.Reload.Plugins.Description">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.Events.Commands.Reload.Plugins.Execute(System.ArraySegment{System.String},CommandSystem.ICommandSender,System.String@)">
            <inheritdoc/>
        </member>
        <member name="T:Exiled.Events.Commands.Reload.Reload">
            <summary>
            The reload command.
            </summary>
        </member>
        <member name="M:Exiled.Events.Commands.Reload.Reload.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.Commands.Reload.Reload"/> class.
            </summary>
        </member>
        <member name="P:Exiled.Events.Commands.Reload.Reload.Command">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.Events.Commands.Reload.Reload.Aliases">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.Events.Commands.Reload.Reload.Description">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.Events.Commands.Reload.Reload.LoadGeneratedCommands">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.Events.Commands.Reload.Reload.ExecuteParent(System.ArraySegment{System.String},CommandSystem.ICommandSender,System.String@)">
            <inheritdoc/>
        </member>
        <member name="T:Exiled.Events.Commands.Reload.RemoteAdmin">
            <summary>
            The reload remoteadmin command.
            </summary>
        </member>
        <member name="P:Exiled.Events.Commands.Reload.RemoteAdmin.Command">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.Events.Commands.Reload.RemoteAdmin.Aliases">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.Events.Commands.Reload.RemoteAdmin.Description">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.Events.Commands.Reload.RemoteAdmin.Execute(System.ArraySegment{System.String},CommandSystem.ICommandSender,System.String@)">
            <inheritdoc/>
        </member>
        <member name="T:Exiled.Events.Config">
            <inheritdoc cref="T:Exiled.API.Interfaces.IConfig"/>
        </member>
        <member name="P:Exiled.Events.Config.IsEnabled">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.Events.Config.CanTutorialBlockScp173">
            <summary>
            Gets or sets a value indicating whether SCP-173 can be blocked or not by the tutorial.
            </summary>
        </member>
        <member name="P:Exiled.Events.Config.CanTutorialTriggerScp096">
            <summary>
            Gets or sets a value indicating whether SCP-096 can be triggered or not by the tutorial.
            </summary>
        </member>
        <member name="P:Exiled.Events.Config.IsNameTrackingEnabled">
            <summary>
            Gets or sets a value indicating whether the name tracking is enabled or not.
            </summary>
        </member>
        <member name="P:Exiled.Events.Config.ShouldDropInventory">
            <summary>
            Gets or sets a value indicating whether the inventory should be dropped before being set as spectator, through commands or plugins.
            </summary>
        </member>
        <member name="P:Exiled.Events.Config.CanSpawnBlood">
            <summary>
            Gets or sets a value indicating whether the blood can be spawned or not.
            </summary>
        </member>
        <member name="P:Exiled.Events.Config.AntiFlyThreshold">
            <summary>
            Gets or sets the anti-fly treshold.
            </summary>
        </member>
        <member name="P:Exiled.Events.Config.IsAntiFlyEnabled">
            <summary>
            Gets or sets a value indicating whether the anti fly is enabled or not.
            </summary>
        </member>
        <member name="P:Exiled.Events.Config.IsRespawnRandom">
            <summary>
            Gets or sets a value indicating whether the teams have to be respawned at random or not.
            </summary>
        </member>
        <member name="P:Exiled.Events.Config.ShouldReloadConfigsAtRoundRestart">
            <summary>
            Gets or sets a value indicating whether configs has to be reloaded every time a round restarts.
            </summary>
        </member>
        <member name="P:Exiled.Events.Config.ShouldLogBans">
            <summary>
            Gets a value indicating whether bans should be logged or not.
            </summary>
        </member>
        <member name="P:Exiled.Events.Config.Scp096MaxShieldAmount">
            <summary>
            Gets or sets a value indicating the max shield amount for Scp096.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.ActivatingEventArgs">
            <summary>
            Contains all informations before a player activates SCP-914.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.ActivatingEventArgs.#ctor(Exiled.API.Features.Player,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.ActivatingEventArgs"/> class.
            </summary>
            <param name="player"><inheritdoc cref="P:Exiled.Events.EventArgs.ActivatingEventArgs.Player"/></param>
            <param name="isAllowed"><inheritdoc cref="P:Exiled.Events.EventArgs.ActivatingEventArgs.IsAllowed"/></param>
        </member>
        <member name="P:Exiled.Events.EventArgs.ActivatingEventArgs.Player">
            <summary>
            Gets the player who's activating SCP-914.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.ActivatingEventArgs.IsAllowed">
            <summary>
            Gets or sets a value indicating whether the event can be executed or not.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.ActivatingWarheadPanelEventArgs">
            <summary>
            Contains all informations before a player activates the warhead panel.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.ActivatingWarheadPanelEventArgs.#ctor(Exiled.API.Features.Player,System.Collections.Generic.List{System.String},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.ActivatingWarheadPanelEventArgs"/> class.
            </summary>
            <param name="player"><inheritdoc cref="P:Exiled.Events.EventArgs.ActivatingWarheadPanelEventArgs.Player"/></param>
            <param name="permissions"><inheritdoc cref="P:Exiled.Events.EventArgs.ActivatingWarheadPanelEventArgs.Permissions"/></param>
            <param name="isAllowed"><inheritdoc cref="P:Exiled.Events.EventArgs.ActivatingWarheadPanelEventArgs.IsAllowed"/></param>
        </member>
        <member name="P:Exiled.Events.EventArgs.ActivatingWarheadPanelEventArgs.Player">
            <summary>
            Gets the player who's trying to activate the warhead panel.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.ActivatingWarheadPanelEventArgs.Permissions">
            <summary>
            Gets a list of permissions, required to activate the warhead panel.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.ActivatingWarheadPanelEventArgs.IsAllowed">
            <summary>
            Gets or sets a value indicating whether the event can be executed or not.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.AddingTargetEventArgs">
            <summary>
            Contains all information before adding a target to SCP-096.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.AddingTargetEventArgs.#ctor(Exiled.API.Features.Player,Exiled.API.Features.Player,System.Int32,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.AddingTargetEventArgs"/> class.
            </summary>
            <param name="scp096"><see cref="T:Exiled.API.Features.Player"/> who is SCP-096.</param>
            <param name="target"><see cref="T:Exiled.API.Features.Player"/> who is the target to be added.</param>
            <param name="ahpToAdd"><see cref="T:System.Int32"/> amount of temporary health to add to <see cref="P:Exiled.Events.EventArgs.AddingTargetEventArgs.Scp096"/>.</param>
            <param name="enrageTimeToAdd"><see cref="T:System.Single"/> amount of time to add to <see cref="P:Exiled.Events.EventArgs.AddingTargetEventArgs.Scp096"/>'s enrage timer. Note: This does not affect anything if he doesn't already have any targets before this event is called.</param>
        </member>
        <member name="P:Exiled.Events.EventArgs.AddingTargetEventArgs.Scp096">
            <summary>
            Gets the <see cref="T:Exiled.API.Features.Player"/> object of the SCP-096.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.AddingTargetEventArgs.Target">
            <summary>
            Gets the <see cref="T:Exiled.API.Features.Player"/> being added as a target.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.AddingTargetEventArgs.IsAllowed">
            <summary>
            Gets or sets a value indicating whether gets or sets whether or not the target is allowed to be added.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.AddingTargetEventArgs.AhpToAdd">
            <summary>
            Gets or sets the amount of AHP to add to 096 if <see cref="P:Exiled.Events.EventArgs.AddingTargetEventArgs.IsAllowed"/> is true.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.AddingTargetEventArgs.EnrageTimeToAdd">
            <summary>
            Gets or sets how much time is added to <see cref="P:Exiled.Events.EventArgs.AddingTargetEventArgs.Scp096"/>'s enrage timer if <see cref="P:Exiled.Events.EventArgs.AddingTargetEventArgs.IsAllowed"/> is true.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.AnnouncingDecontaminationEventArgs">
            <summary>
            Contains all informations before starting the decontamination.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.AnnouncingDecontaminationEventArgs.#ctor(System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.AnnouncingDecontaminationEventArgs"/> class.
            </summary>
            <param name="announcementId"><inheritdoc cref="P:Exiled.Events.EventArgs.AnnouncingDecontaminationEventArgs.Id"/></param>
            <param name="isGlobal"><inheritdoc cref="P:Exiled.Events.EventArgs.AnnouncingDecontaminationEventArgs.IsGlobal"/></param>
            <param name="isAllowed"><inheritdoc cref="P:Exiled.Events.EventArgs.AnnouncingDecontaminationEventArgs.IsAllowed"/></param>
        </member>
        <member name="P:Exiled.Events.EventArgs.AnnouncingDecontaminationEventArgs.Id">
            <summary>
            Gets or sets the announcement id, from 0 to 6.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.AnnouncingDecontaminationEventArgs.IsGlobal">
            <summary>
            Gets or sets a value indicating whether the announcement is going to be global or not.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.AnnouncingDecontaminationEventArgs.IsAllowed">
            <summary>
            Gets or sets a value indicating whether the event can be executed or not.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.AnnouncingNtfEntranceEventArgs">
            <summary>
            Contains all informations before announcing the ntf entrance.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.AnnouncingNtfEntranceEventArgs.#ctor(System.Int32,System.String,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.AnnouncingNtfEntranceEventArgs"/> class.
            </summary>
            <param name="scpsLeft"><inheritdoc cref="P:Exiled.Events.EventArgs.AnnouncingNtfEntranceEventArgs.ScpsLeft"/></param>
            <param name="unitName"><inheritdoc cref="P:Exiled.Events.EventArgs.AnnouncingNtfEntranceEventArgs.UnitName"/></param>
            <param name="unitNumber"><inheritdoc cref="P:Exiled.Events.EventArgs.AnnouncingNtfEntranceEventArgs.UnitNumber"/></param>
            <param name="isAllowed"><inheritdoc cref="P:Exiled.Events.EventArgs.AnnouncingNtfEntranceEventArgs.IsAllowed"/></param>
        </member>
        <member name="P:Exiled.Events.EventArgs.AnnouncingNtfEntranceEventArgs.ScpsLeft">
            <summary>
            Gets the number of scps left.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.AnnouncingNtfEntranceEventArgs.UnitName">
            <summary>
            Gets or sets the unit name.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.AnnouncingNtfEntranceEventArgs.UnitNumber">
            <summary>
            Gets or sets the unit number.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.AnnouncingNtfEntranceEventArgs.IsAllowed">
            <summary>
            Gets or sets a value indicating whether the event can be executed or not.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.AnnouncingScpTerminationEventArgs">
            <summary>
            Contains all informations before announcing an SCP termination.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.AnnouncingScpTerminationEventArgs.#ctor(Exiled.API.Features.Player,Role,PlayerStats.HitInfo,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.AnnouncingScpTerminationEventArgs"/> class.
            </summary>
            <param name="killer"><inheritdoc cref="P:Exiled.Events.EventArgs.AnnouncingScpTerminationEventArgs.Killer"/></param>
            <param name="role"><inheritdoc cref="P:Exiled.Events.EventArgs.AnnouncingScpTerminationEventArgs.Role"/></param>
            <param name="hitInfo"><inheritdoc cref="P:Exiled.Events.EventArgs.AnnouncingScpTerminationEventArgs.HitInfo"/></param>
            <param name="terminationCause"><inheritdoc cref="P:Exiled.Events.EventArgs.AnnouncingScpTerminationEventArgs.TerminationCause"/></param>
            <param name="isAllowed"><inheritdoc cref="P:Exiled.Events.EventArgs.AnnouncingScpTerminationEventArgs.IsAllowed"/></param>
        </member>
        <member name="P:Exiled.Events.EventArgs.AnnouncingScpTerminationEventArgs.Killer">
            <summary>
            Gets the player who killed the SCP.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.AnnouncingScpTerminationEventArgs.Role">
            <summary>
            Gets the killed <see cref="P:Exiled.Events.EventArgs.AnnouncingScpTerminationEventArgs.Role"/>.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.AnnouncingScpTerminationEventArgs.HitInfo">
            <summary>
            Gets or sets the hit info.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.AnnouncingScpTerminationEventArgs.TerminationCause">
            <summary>
            Gets or sets the termination cause.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.AnnouncingScpTerminationEventArgs.IsAllowed">
            <summary>
            Gets or sets a value indicating whether the event can be executed or not.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.BannedEventArgs">
            <summary>
            Contains all informations after banning a player from the server.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.BannedEventArgs.#ctor(Exiled.API.Features.Player,BanDetails,BanHandler.BanType)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.BannedEventArgs"/> class.
            </summary>
            <param name="player">The banned player.</param>
            <param name="details">The ban details.</param>
            <param name="type"><inheritdoc cref="P:Exiled.Events.EventArgs.BannedEventArgs.Type"/></param>
        </member>
        <member name="P:Exiled.Events.EventArgs.BannedEventArgs.Player">
            <summary>
            Gets the banned player.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.BannedEventArgs.Details">
            <summary>
            Gets the ban details.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.BannedEventArgs.Type">
            <summary>
            Gets the ban type.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.BanningEventArgs">
            <summary>
            Contains all informations before banning a player.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.BanningEventArgs.#ctor(Exiled.API.Features.Player,Exiled.API.Features.Player,System.Int32,System.String,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.BanningEventArgs"/> class.
            </summary>
            <param name="target">The ban target.</param>
            <param name="issuer">The ban issuer.</param>
            <param name="duration">The ban minutes duration.</param>
            <param name="reason">The ban reason.</param>
            <param name="fullMessage">The ban full message.</param>
            <param name="isAllowed">Indicates whether the event can be executed or not.</param>
        </member>
        <member name="P:Exiled.Events.EventArgs.BanningEventArgs.Duration">
            <summary>
            Gets or sets the ban duration.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.CalmingDownEventArgs">
            <summary>
            Contains all informations before SCP-096 calms down.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.CalmingDownEventArgs.#ctor(PlayableScps.Scp096,Exiled.API.Features.Player,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.CalmingDownEventArgs"/> class.
            </summary>
            <param name="scp096">The <see cref="T:PlayableScps.Scp096"/> instance.</param>
            <param name="player">The player who's controlling SCP-096.</param>
            <param name="isAllowed">Indicates whether the event can be executed or not.</param>
        </member>
        <member name="T:Exiled.Events.EventArgs.ChangingGroupEventArgs">
            <summary>
            Contains all informations before a player changes his group.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.ChangingGroupEventArgs.#ctor(Exiled.API.Features.Player,UserGroup,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.ChangingGroupEventArgs"/> class.
            </summary>
            <param name="player"><inheritdoc cref="P:Exiled.Events.EventArgs.ChangingGroupEventArgs.Player"/></param>
            <param name="newGroup"><inheritdoc cref="P:Exiled.Events.EventArgs.ChangingGroupEventArgs.NewGroup"/></param>
            <param name="isAllowed"><inheritdoc cref="P:Exiled.Events.EventArgs.ChangingGroupEventArgs.IsAllowed"/></param>
        </member>
        <member name="P:Exiled.Events.EventArgs.ChangingGroupEventArgs.Player">
            <summary>
            Gets the player who's changing his group.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.ChangingGroupEventArgs.NewGroup">
            <summary>
            Gets or sets the player's new group.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.ChangingGroupEventArgs.IsAllowed">
            <summary>
            Gets or sets a value indicating whether the event can be executed or not.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.ChangingItemEventArgs">
            <summary>
            Contains all informations before a player changes the item in his hand.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.ChangingItemEventArgs.#ctor(Exiled.API.Features.Player,Inventory.SyncItemInfo,Inventory.SyncItemInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.ChangingItemEventArgs"/> class.
            </summary>
            <param name="player"><inheritdoc cref="P:Exiled.Events.EventArgs.ChangingItemEventArgs.Player"/></param>
            <param name="oldItem"><inheritdoc cref="P:Exiled.Events.EventArgs.ChangingItemEventArgs.OldItem"/></param>
            <param name="newItem"><inheritdoc cref="P:Exiled.Events.EventArgs.ChangingItemEventArgs.NewItem"/></param>
        </member>
        <member name="P:Exiled.Events.EventArgs.ChangingItemEventArgs.Player">
            <summary>
            Gets the player who's changing the item.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.ChangingItemEventArgs.OldItem">
            <summary>
            Gets or sets the old item.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.ChangingItemEventArgs.NewItem">
            <summary>
            Gets the new item.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.ChangingKnobSettingEventArgs">
            <summary>
            Contains all informations before changing the SCP-914 knob setting.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.ChangingKnobSettingEventArgs.#ctor(Exiled.API.Features.Player,Scp914.Scp914Knob,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.ChangingKnobSettingEventArgs"/> class.
            </summary>
            <param name="player"><inheritdoc cref="P:Exiled.Events.EventArgs.ChangingKnobSettingEventArgs.Player"/></param>
            <param name="knobSetting"><inheritdoc cref="P:Exiled.Events.EventArgs.ChangingKnobSettingEventArgs.KnobSetting"/></param>
            <param name="isAllowed"><inheritdoc cref="P:Exiled.Events.EventArgs.ChangingKnobSettingEventArgs.IsAllowed"/></param>
        </member>
        <member name="P:Exiled.Events.EventArgs.ChangingKnobSettingEventArgs.Player">
            <summary>
            Gets the player who's changing the SCP-914 knob setting.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.ChangingKnobSettingEventArgs.KnobSetting">
            <summary>
            Gets or sets the SCP-914 knob setting.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.ChangingKnobSettingEventArgs.IsAllowed">
            <summary>
            Gets or sets a value indicating whether the event can be executed or not.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.ChangingRoleEventArgs">
            <summary>
            Contains all informations before a player changes his role.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.ChangingRoleEventArgs.#ctor(Exiled.API.Features.Player,RoleType,System.Collections.Generic.List{ItemType},System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.ChangingRoleEventArgs"/> class.
            </summary>
            <param name="player"><inheritdoc cref="P:Exiled.Events.EventArgs.ChangingRoleEventArgs.Player"/></param>
            <param name="newRole"><inheritdoc cref="P:Exiled.Events.EventArgs.ChangingRoleEventArgs.NewRole"/></param>
            <param name="items"><inheritdoc cref="P:Exiled.Events.EventArgs.ChangingRoleEventArgs.Items"/></param>
            <param name="shouldPreservePosition"><inheritdoc cref="P:Exiled.Events.EventArgs.ChangingRoleEventArgs.ShouldPreservePosition"/></param>
            <param name="isEscaped"><inheritdoc cref="P:Exiled.Events.EventArgs.ChangingRoleEventArgs.IsEscaped"/></param>
        </member>
        <member name="P:Exiled.Events.EventArgs.ChangingRoleEventArgs.Player">
            <summary>
            Gets the player who'll change his role.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.ChangingRoleEventArgs.NewRole">
            <summary>
            Gets or sets the new player's role.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.ChangingRoleEventArgs.Items">
            <summary>
            Gets base items that the player will receive.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.ChangingRoleEventArgs.IsEscaped">
            <summary>
            Gets or sets a value indicating whether the player is escaped or not.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.ChangingRoleEventArgs.ShouldPreservePosition">
            <summary>
            Gets or sets a value indicating whether the position has to be preserved after changing the role.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.ChangingWarheadLeverStatusEventArgs">
            <summary>
            Contains all informations before a player changes the warhead lever.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.ChangingWarheadLeverStatusEventArgs.#ctor(Exiled.API.Features.Player,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.ChangingWarheadLeverStatusEventArgs"/> class.
            </summary>
            <param name="player"><inheritdoc cref="P:Exiled.Events.EventArgs.ChangingWarheadLeverStatusEventArgs.Player"/></param>
            <param name="isAllowed"><inheritdoc cref="P:Exiled.Events.EventArgs.ChangingWarheadLeverStatusEventArgs.IsAllowed"/></param>
        </member>
        <member name="P:Exiled.Events.EventArgs.ChangingWarheadLeverStatusEventArgs.Player">
            <summary>
            Gets the player who's changing the warhead status.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.ChangingWarheadLeverStatusEventArgs.IsAllowed">
            <summary>
            Gets or sets a value indicating whether the event can be executed or not.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.ClosingGeneratorEventArgs">
            <summary>
            Contains all informations before a player closes a generator.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.ClosingGeneratorEventArgs.#ctor(Exiled.API.Features.Player,Generator079,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.ClosingGeneratorEventArgs"/> class.
            </summary>
            <param name="player">The player who's closing the generator.</param>
            <param name="generator">The <see cref="T:Generator079"/> instance.</param>
            <param name="isAllowed">Indicates whether the event can be executed or not.</param>
        </member>
        <member name="T:Exiled.Events.EventArgs.ContainingEventArgs">
            <summary>
            Contains all informations before containing SCP-106.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.ContainingEventArgs.#ctor(Exiled.API.Features.Player,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.ContainingEventArgs"/> class.
            </summary>
            <param name="player"><inheritdoc cref="P:Exiled.Events.EventArgs.ContainingEventArgs.Player"/></param>
            <param name="isAllowed"><inheritdoc cref="P:Exiled.Events.EventArgs.ContainingEventArgs.IsAllowed"/></param>
        </member>
        <member name="P:Exiled.Events.EventArgs.ContainingEventArgs.Player">
            <summary>
            Gets the player who's controlling SCP-106.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.ContainingEventArgs.IsAllowed">
            <summary>
            Gets or sets a value indicating whether the event can be executed or not.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.CreatingPortalEventArgs">
            <summary>
            Contains all informations before creating a portal with SCP-096.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.CreatingPortalEventArgs.#ctor(Exiled.API.Features.Player,UnityEngine.Vector3,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.CreatingPortalEventArgs"/> class.
            </summary>
            <param name="player"><inheritdoc cref="P:Exiled.Events.EventArgs.CreatingPortalEventArgs.Player"/></param>
            <param name="position"><inheritdoc cref="P:Exiled.Events.EventArgs.CreatingPortalEventArgs.Position"/></param>
            <param name="isAllowed"><inheritdoc cref="P:Exiled.Events.EventArgs.CreatingPortalEventArgs.IsAllowed"/></param>
        </member>
        <member name="P:Exiled.Events.EventArgs.CreatingPortalEventArgs.Player">
            <summary>
            Gets the player who's controlling SCP-096.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.CreatingPortalEventArgs.Position">
            <summary>
            Gets or sets the portal position.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.CreatingPortalEventArgs.IsAllowed">
            <summary>
            Gets or sets a value indicating whether the event can be executed or not.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.DecontaminatingEventArgs">
            <summary>
            Contains all informations before decontaminating the light containment zone.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.DecontaminatingEventArgs.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.DecontaminatingEventArgs"/> class.
            </summary>
            <param name="isAllowed"><inheritdoc cref="P:Exiled.Events.EventArgs.DecontaminatingEventArgs.IsAllowed"/></param>
        </member>
        <member name="P:Exiled.Events.EventArgs.DecontaminatingEventArgs.IsAllowed">
            <summary>
            Gets or sets a value indicating whether the event can be executed or not.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.DiedEventArgs">
            <summary>
            Contains all informations after a player dies.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.DiedEventArgs.#ctor(Exiled.API.Features.Player,Exiled.API.Features.Player,PlayerStats.HitInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.DiedEventArgs"/> class.
            </summary>
            <param name="killer"><inheritdoc cref="P:Exiled.Events.EventArgs.DiedEventArgs.Killer"/></param>
            <param name="target"><inheritdoc cref="P:Exiled.Events.EventArgs.DiedEventArgs.Target"/></param>
            <param name="hitInformations"><inheritdoc cref="P:Exiled.Events.EventArgs.DiedEventArgs.HitInformations"/></param>
        </member>
        <member name="P:Exiled.Events.EventArgs.DiedEventArgs.Killer">
            <summary>
            Gets the killer player.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.DiedEventArgs.Target">
            <summary>
            Gets the killed player.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.DiedEventArgs.HitInformations">
            <summary>
            Gets or sets the hit informations.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.DroppingItemEventArgs">
            <summary>
            Contains all informations before a player drops an item.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.DroppingItemEventArgs.#ctor(Exiled.API.Features.Player,Inventory.SyncItemInfo,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.DroppingItemEventArgs"/> class.
            </summary>
            <param name="player"><inheritdoc cref="P:Exiled.Events.EventArgs.DroppingItemEventArgs.Player"/></param>
            <param name="item"><inheritdoc cref="P:Exiled.Events.EventArgs.DroppingItemEventArgs.Item"/></param>
            <param name="isAllowed"><inheritdoc cref="P:Exiled.Events.EventArgs.DroppingItemEventArgs.IsAllowed"/></param>
        </member>
        <member name="P:Exiled.Events.EventArgs.DroppingItemEventArgs.Player">
            <summary>
            Gets the player who's dropping the item.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.DroppingItemEventArgs.Item">
            <summary>
            Gets or sets the item to be dropped.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.DroppingItemEventArgs.IsAllowed">
            <summary>
            Gets or sets a value indicating whether the event can be executed or not.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.DyingEventArgs">
            <summary>
            Contains all information before a player dies.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.DyingEventArgs.#ctor(Exiled.API.Features.Player,Exiled.API.Features.Player,PlayerStats.HitInfo,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.DyingEventArgs"/> class.
            </summary>
            <param name="killer"><inheritdoc cref="P:Exiled.Events.EventArgs.DyingEventArgs.Killer"/></param>
            <param name="target"><inheritdoc cref="P:Exiled.Events.EventArgs.DyingEventArgs.Target"/></param>
            <param name="hitInformation"><inheritdoc cref="P:Exiled.Events.EventArgs.DyingEventArgs.HitInformation"/></param>
            <param name="isAllowed"><inheritdoc cref="P:Exiled.Events.EventArgs.DyingEventArgs.IsAllowed"/></param>
        </member>
        <member name="P:Exiled.Events.EventArgs.DyingEventArgs.Killer">
            <summary>
            Gets the killing player.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.DyingEventArgs.Target">
            <summary>
            Gets the dying player.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.DyingEventArgs.HitInformation">
            <summary>
            Gets or sets the hit information.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.DyingEventArgs.IsAllowed">
            <summary>
            Gets or sets a value indicating whether gets or sets if the player should be killed or not.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.EjectingGeneratorTabletEventArgs">
            <summary>
            Contains all informations before a player ejects a tablet.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.EjectingGeneratorTabletEventArgs.#ctor(Exiled.API.Features.Player,Generator079,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.EjectingGeneratorTabletEventArgs"/> class.
            </summary>
            <param name="player">The player who's ejecting the tablet.</param>
            <param name="generator">The <see cref="T:Generator079"/> instance.</param>
            <param name="isAllowed">Indicates whether the event can be executed or not.</param>
        </member>
        <member name="T:Exiled.Events.EventArgs.EndingRoundEventArgs">
            <summary>
            Contains all informations before ending a round.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.EndingRoundEventArgs.#ctor(Exiled.API.Enums.LeadingTeam,RoundSummary.SumInfo_ClassList,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.EndingRoundEventArgs"/> class.
            </summary>
            <param name="classList"><inheritdoc cref="T:RoundSummary.SumInfo_ClassList"/></param>
            <param name="leadingTeam"><inheritdoc cref="P:Exiled.Events.EventArgs.EndingRoundEventArgs.LeadingTeam"/></param>
            <param name="isRoundEnded"><inheritdoc cref="P:Exiled.Events.EventArgs.EndingRoundEventArgs.IsRoundEnded"/></param>
            <param name="isAllowed"><inheritdoc cref="P:Exiled.Events.EventArgs.EndingRoundEventArgs.IsAllowed"/></param>
        </member>
        <member name="P:Exiled.Events.EventArgs.EndingRoundEventArgs.ClassList">
            <summary>
            Gets or sets the round summary class list.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.EndingRoundEventArgs.LeadingTeam">
            <summary>
            Gets or sets the leading team.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.EndingRoundEventArgs.IsRoundEnded">
            <summary>
            Gets or sets a value indicating whether the round is going to finish or not.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.EndingRoundEventArgs.IsAllowed">
            <summary>
            Gets or sets a value indicating whether the event can be executed or not.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.EnragingEventArgs">
            <summary>
            Contains all informations before SCP-096 gets enraged.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.EnragingEventArgs.#ctor(PlayableScps.Scp096,Exiled.API.Features.Player,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.EnragingEventArgs"/> class.
            </summary>
            <param name="scp096"><inheritdoc cref="P:Exiled.Events.EventArgs.EnragingEventArgs.Scp096"/></param>
            <param name="player"><inheritdoc cref="P:Exiled.Events.EventArgs.EnragingEventArgs.Player"/></param>
            <param name="isAllowed"><inheritdoc cref="P:Exiled.Events.EventArgs.EnragingEventArgs.IsAllowed"/></param>
        </member>
        <member name="P:Exiled.Events.EventArgs.EnragingEventArgs.Scp096">
            <summary>
            Gets the SCP-096 instance.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.EnragingEventArgs.Player">
            <summary>
            Gets the player who's controlling SCP-096.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.EnragingEventArgs.IsAllowed">
            <summary>
            Gets or sets a value indicating whether the event can be executed or not.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.EnteringFemurBreakerEventArgs">
            <summary>
            Contains all informations before a player enters the femur breaker.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.EnteringFemurBreakerEventArgs.#ctor(Exiled.API.Features.Player,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.EnteringFemurBreakerEventArgs"/> class.
            </summary>
            <param name="player"><inheritdoc cref="P:Exiled.Events.EventArgs.EnteringFemurBreakerEventArgs.Player"/></param>
            <param name="isAllowed"><inheritdoc cref="P:Exiled.Events.EventArgs.EnteringFemurBreakerEventArgs.IsAllowed"/></param>
        </member>
        <member name="P:Exiled.Events.EventArgs.EnteringFemurBreakerEventArgs.Player">
            <summary>
            Gets the player who's entering the femur breaker.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.EnteringFemurBreakerEventArgs.IsAllowed">
            <summary>
            Gets or sets a value indicating whether the event can be executed or not.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.EnteringPocketDimensionEventArgs">
            <summary>
            Contains all informations before a player enters the pocket dimension.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.EnteringPocketDimensionEventArgs.#ctor(Exiled.API.Features.Player,UnityEngine.Vector3,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.EnteringPocketDimensionEventArgs"/> class.
            </summary>
            <param name="player"><inheritdoc cref="P:Exiled.Events.EventArgs.EnteringPocketDimensionEventArgs.Player"/></param>
            <param name="position"><inheritdoc cref="P:Exiled.Events.EventArgs.EnteringPocketDimensionEventArgs.Position"/></param>
            <param name="isAllowed"><inheritdoc cref="P:Exiled.Events.EventArgs.EnteringPocketDimensionEventArgs.IsAllowed"/></param>
        </member>
        <member name="P:Exiled.Events.EventArgs.EnteringPocketDimensionEventArgs.Player">
            <summary>
            Gets the player who's entering the pocket dimension.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.EnteringPocketDimensionEventArgs.Position">
            <summary>
            Gets or sets the pocket dimension position.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.EnteringPocketDimensionEventArgs.IsAllowed">
            <summary>
            Gets or sets a value indicating whether the event can be executed or not.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.EscapingEventArgs">
            <summary>
            Contains all informations before a player escapes.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.EscapingEventArgs.#ctor(Exiled.API.Features.Player,RoleType,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.EscapingEventArgs"/> class.
            </summary>
            <param name="player"><inheritdoc cref="P:Exiled.Events.EventArgs.EscapingEventArgs.Player"/></param>
            <param name="newRole"><inheritdoc cref="P:Exiled.Events.EventArgs.EscapingEventArgs.NewRole"/></param>
            <param name="isAllowed"><inheritdoc cref="P:Exiled.Events.EventArgs.EscapingEventArgs.IsAllowed"/></param>
        </member>
        <member name="P:Exiled.Events.EventArgs.EscapingEventArgs.Player">
            <summary>
            Gets the player who's escaping.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.EscapingEventArgs.NewRole">
            <summary>
            Gets or sets the new player's role, assigned after escaping.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.EscapingEventArgs.IsAllowed">
            <summary>
            Gets or sets a value indicating whether the event can be executed or not.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.EscapingPocketDimensionEventArgs">
            <summary>
            Contains all informations before a player escapes the pocket dimension.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.EscapingPocketDimensionEventArgs.#ctor(Exiled.API.Features.Player,UnityEngine.Vector3,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.EscapingPocketDimensionEventArgs"/> class.
            </summary>
            <param name="player"><inheritdoc cref="P:Exiled.Events.EventArgs.EscapingPocketDimensionEventArgs.Player"/></param>
            <param name="teleportPosition"><inheritdoc cref="P:Exiled.Events.EventArgs.EscapingPocketDimensionEventArgs.TeleportPosition"/></param>
            <param name="isAllowed"><inheritdoc cref="P:Exiled.Events.EventArgs.EscapingPocketDimensionEventArgs.IsAllowed"/></param>
        </member>
        <member name="P:Exiled.Events.EventArgs.EscapingPocketDimensionEventArgs.Player">
            <summary>
            Gets the player who's escaping the pocket dimension.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.EscapingPocketDimensionEventArgs.TeleportPosition">
            <summary>
            Gets or sets the position in which the player is going to be teleported.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.EscapingPocketDimensionEventArgs.IsAllowed">
            <summary>
            Gets or sets a value indicating whether the event can be executed or not.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.ExplodingGrenadeEventArgs">
            <summary>
            Contains all informations before a grenade explodes.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.ExplodingGrenadeEventArgs.#ctor(Exiled.API.Features.Player,System.Collections.Generic.Dictionary{Exiled.API.Features.Player,System.Single},System.Boolean,UnityEngine.GameObject,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.ExplodingGrenadeEventArgs"/> class.
            </summary>
            <param name="thrower"><inheritdoc cref="P:Exiled.Events.EventArgs.ExplodingGrenadeEventArgs.Thrower"/></param>
            <param name="targetToDamages"><inheritdoc cref="P:Exiled.Events.EventArgs.ExplodingGrenadeEventArgs.TargetToDamages"/></param>
            <param name="isFrag"><inheritdoc cref="P:Exiled.Events.EventArgs.ExplodingGrenadeEventArgs.IsFrag"/></param>
            <param name="grenade"><inheritdoc cref="P:Exiled.Events.EventArgs.ExplodingGrenadeEventArgs.Grenade"/></param>
            <param name="isAllowed"><inheritdoc cref="P:Exiled.Events.EventArgs.ExplodingGrenadeEventArgs.IsAllowed"/></param>
        </member>
        <member name="P:Exiled.Events.EventArgs.ExplodingGrenadeEventArgs.Thrower">
            <summary>
            Gets the player who thrown the grenade.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.ExplodingGrenadeEventArgs.TargetToDamages">
            <summary>
            Gets the players who could be affected by the grenade, if any, and the damage that would hurt them.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.ExplodingGrenadeEventArgs.Targets">
            <summary>
            Gets the players who could be affected by the grenade, if any.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.ExplodingGrenadeEventArgs.IsFrag">
            <summary>
            Gets a value indicating whether the grenade is a frag or flash grenade.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.ExplodingGrenadeEventArgs.Grenade">
            <summary>
            Gets the grenade that is exploding.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.ExplodingGrenadeEventArgs.IsAllowed">
            <summary>
            Gets or sets a value indicating whether the event can be executed or not.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.FailingEscapePocketDimensionEventArgs">
            <summary>
            Contains all informations before a player dies from walking through the incorrect exit in the pocket dimension.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.FailingEscapePocketDimensionEventArgs.#ctor(Exiled.API.Features.Player,PocketDimensionTeleport,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.FailingEscapePocketDimensionEventArgs"/> class.
            </summary>
            <param name="player"><inheritdoc cref="P:Exiled.Events.EventArgs.FailingEscapePocketDimensionEventArgs.Player"/></param>
            <param name="teleporter"><inheritdoc cref="P:Exiled.Events.EventArgs.FailingEscapePocketDimensionEventArgs.Teleporter"/></param>
            <param name="isAllowed"><inheritdoc cref="P:Exiled.Events.EventArgs.FailingEscapePocketDimensionEventArgs.IsAllowed"/></param>
        </member>
        <member name="P:Exiled.Events.EventArgs.FailingEscapePocketDimensionEventArgs.Player">
            <summary>
            Gets the player who's escaping the pocket dimension.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.FailingEscapePocketDimensionEventArgs.Teleporter">
            <summary>
            Gets the PocketDimensionTeleport the player walked into.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.FailingEscapePocketDimensionEventArgs.IsAllowed">
            <summary>
            Gets or sets a value indicating whether the event can be executed or not.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.FinishingRecallEventArgs">
            <summary>
            Contains all informations before a player is infected.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.FinishingRecallEventArgs.#ctor(Exiled.API.Features.Player,Exiled.API.Features.Player,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.FinishingRecallEventArgs"/> class.
            </summary>
            <param name="target"><inheritdoc cref="P:Exiled.Events.EventArgs.FinishingRecallEventArgs.Target"/></param>
            <param name="scp049"><inheritdoc cref="P:Exiled.Events.EventArgs.FinishingRecallEventArgs.Scp049"/></param>
            <param name="isAllowed"><inheritdoc cref="P:Exiled.Events.EventArgs.FinishingRecallEventArgs.IsAllowed"/></param>
        </member>
        <member name="P:Exiled.Events.EventArgs.FinishingRecallEventArgs.Target">
            <summary>
            Gets the player who's getting infected.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.FinishingRecallEventArgs.Scp049">
            <summary>
            Gets the player who is SCP049.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.FinishingRecallEventArgs.IsAllowed">
            <summary>
            Gets or sets a value indicating whether the event can be executed or not.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.GainingExperienceEventArgs">
            <summary>
            Contains all informations before SCP-079 gains experience.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.GainingExperienceEventArgs.#ctor(Exiled.API.Features.Player,ExpGainType,System.Single,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.GainingExperienceEventArgs"/> class.
            </summary>
            <param name="player"><inheritdoc cref="P:Exiled.Events.EventArgs.GainingExperienceEventArgs.Player"/></param>
            <param name="gainType"><inheritdoc cref="P:Exiled.Events.EventArgs.GainingExperienceEventArgs.GainType"/></param>
            <param name="amount"><inheritdoc cref="P:Exiled.Events.EventArgs.GainingExperienceEventArgs.Amount"/></param>
            <param name="isAllowed"><inheritdoc cref="P:Exiled.Events.EventArgs.GainingExperienceEventArgs.IsAllowed"/></param>
        </member>
        <member name="P:Exiled.Events.EventArgs.GainingExperienceEventArgs.Player">
            <summary>
            Gets the player who's controlling SCP-079.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.GainingExperienceEventArgs.GainType">
            <summary>
            Gets the experience gain type.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.GainingExperienceEventArgs.Amount">
            <summary>
            Gets or sets the amount of experience to be gained.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.GainingExperienceEventArgs.IsAllowed">
            <summary>
            Gets or sets a value indicating whether the event can be executed or not.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.GainingLevelEventArgs">
            <summary>
            Contains all informations before SCP-079 gains a level.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.GainingLevelEventArgs.#ctor(Exiled.API.Features.Player,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.GainingLevelEventArgs"/> class.
            </summary>
            <param name="player"><inheritdoc cref="P:Exiled.Events.EventArgs.GainingLevelEventArgs.Player"/></param>
            <param name="oldLevel"><inheritdoc cref="P:Exiled.Events.EventArgs.GainingLevelEventArgs.OldLevel"/></param>
            <param name="newLevel"><inheritdoc cref="P:Exiled.Events.EventArgs.GainingLevelEventArgs.NewLevel"/></param>
            <param name="isAllowed"><inheritdoc cref="P:Exiled.Events.EventArgs.GainingLevelEventArgs.IsAllowed"/></param>
        </member>
        <member name="P:Exiled.Events.EventArgs.GainingLevelEventArgs.Player">
            <summary>
            Gets the player who's controlling SCP-079.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.GainingLevelEventArgs.OldLevel">
            <summary>
            Gets the old level of SCP-079.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.GainingLevelEventArgs.NewLevel">
            <summary>
            Gets or sets the new level of SCP-079.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.GainingLevelEventArgs.IsAllowed">
            <summary>
            Gets or sets a value indicating whether the event can be executed or not.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.GeneratorActivatedEventArgs">
            <summary>
            Contains all informations after activating a generator.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.GeneratorActivatedEventArgs.#ctor(Generator079)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.GeneratorActivatedEventArgs"/> class.
            </summary>
            <param name="generator"><inheritdoc cref="P:Exiled.Events.EventArgs.GeneratorActivatedEventArgs.Generator"/></param>
        </member>
        <member name="P:Exiled.Events.EventArgs.GeneratorActivatedEventArgs.Generator">
            <summary>
            Gets the activated generator.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.HandcuffingEventArgs">
            <summary>
            Contains all informations before handcuffing a player.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.HandcuffingEventArgs.#ctor(Exiled.API.Features.Player,Exiled.API.Features.Player,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.HandcuffingEventArgs"/> class.
            </summary>
            <param name="cuffer"><inheritdoc cref="P:Exiled.Events.EventArgs.HandcuffingEventArgs.Cuffer"/></param>
            <param name="target"><inheritdoc cref="P:Exiled.Events.EventArgs.HandcuffingEventArgs.Target"/></param>
            <param name="isAllowed"><inheritdoc cref="P:Exiled.Events.EventArgs.HandcuffingEventArgs.IsAllowed"/></param>
        </member>
        <member name="P:Exiled.Events.EventArgs.HandcuffingEventArgs.Cuffer">
            <summary>
            Gets the cuffer player.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.HandcuffingEventArgs.Target">
            <summary>
            Gets the target player to be cuffed.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.HandcuffingEventArgs.IsAllowed">
            <summary>
            Gets or sets a value indicating whether the event can be executed or not.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.HurtingEventArgs">
            <summary>
            Contains all informations before a player gets hurt.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.HurtingEventArgs.#ctor(Exiled.API.Features.Player,Exiled.API.Features.Player,PlayerStats.HitInfo,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.HurtingEventArgs"/> class.
            </summary>
            <param name="attacker"><inheritdoc cref="P:Exiled.Events.EventArgs.HurtingEventArgs.Attacker"/></param>
            <param name="target"><inheritdoc cref="P:Exiled.Events.EventArgs.HurtingEventArgs.Target"/></param>
            <param name="hitInformations"><inheritdoc cref="P:Exiled.Events.EventArgs.HurtingEventArgs.HitInformations"/></param>
            <param name="isAllowed"><inheritdoc cref="P:Exiled.Events.EventArgs.HurtingEventArgs.IsAllowed"/></param>
        </member>
        <member name="P:Exiled.Events.EventArgs.HurtingEventArgs.Attacker">
            <summary>
            Gets the attacker player.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.HurtingEventArgs.Target">
            <summary>
            Gets the target player, who is going to be hurt.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.HurtingEventArgs.HitInformations">
            <summary>
            Gets the hit informations.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.HurtingEventArgs.Time">
            <summary>
            Gets the time at which the player was hurt.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.HurtingEventArgs.DamageType">
            <summary>
            Gets the damage type.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.HurtingEventArgs.Tool">
            <summary>
            Gets the tool that damaged the player.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.HurtingEventArgs.Amount">
            <summary>
            Gets or sets the amount of inflicted damage.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.HurtingEventArgs.IsAllowed">
            <summary>
            Gets or sets a value indicating whether the event can be executed or not.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.InsertingGeneratorTabletEventArgs">
            <summary>
            Contains all informations before a player inserts a tablet into a generator.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.InsertingGeneratorTabletEventArgs.#ctor(Exiled.API.Features.Player,Generator079,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.InsertingGeneratorTabletEventArgs"/> class.
            </summary>
            <param name="player"><inheritdoc cref="P:Exiled.Events.EventArgs.InsertingGeneratorTabletEventArgs.Player"/></param>
            <param name="generator"><inheritdoc cref="P:Exiled.Events.EventArgs.InsertingGeneratorTabletEventArgs.Generator"/></param>
            <param name="isAllowed"><inheritdoc cref="P:Exiled.Events.EventArgs.InsertingGeneratorTabletEventArgs.IsAllowed"/></param>
        </member>
        <member name="P:Exiled.Events.EventArgs.InsertingGeneratorTabletEventArgs.Player">
            <summary>
            Gets the player who's inserting a tablet into the generator.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.InsertingGeneratorTabletEventArgs.Generator">
            <summary>
            Gets the <see cref="T:Generator079"/> instance.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.InsertingGeneratorTabletEventArgs.IsAllowed">
            <summary>
            Gets or sets a value indicating whether the event can be executed or not.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.InteractedEventArgs">
            <summary>
            Contains all player's informations after he has interacted with something.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.InteractedEventArgs.#ctor(Exiled.API.Features.Player)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.InteractedEventArgs"/> class.
            </summary>
            <param name="player"><inheritdoc cref="P:Exiled.Events.EventArgs.InteractedEventArgs.Player"/></param>
        </member>
        <member name="P:Exiled.Events.EventArgs.InteractedEventArgs.Player">
            <summary>
            Gets the player who interacted.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.InteractingDoorEventArgs">
            <summary>
            Contains all informations before a player interacts with a door.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.InteractingDoorEventArgs.#ctor(Exiled.API.Features.Player,Door,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.InteractingDoorEventArgs"/> class.
            </summary>
            <param name="player"><inheritdoc cref="P:Exiled.Events.EventArgs.InteractingDoorEventArgs.Player"/></param>
            <param name="door"><inheritdoc cref="P:Exiled.Events.EventArgs.InteractingDoorEventArgs.Door"/></param>
            <param name="isAllowed"><inheritdoc cref="P:Exiled.Events.EventArgs.InteractingDoorEventArgs.IsAllowed"/></param>
        </member>
        <member name="P:Exiled.Events.EventArgs.InteractingDoorEventArgs.Player">
            <summary>
            Gets the player who's interacting with the door.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.InteractingDoorEventArgs.Door">
            <summary>
            Gets or sets the <see cref="P:Exiled.Events.EventArgs.InteractingDoorEventArgs.Door"/> instance.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.InteractingDoorEventArgs.IsAllowed">
            <summary>
            Gets or sets a value indicating whether the event can be executed or not.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.InteractingElevatorEventArgs">
            <summary>
            Contains all information before a player interacts with an elevator.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.InteractingElevatorEventArgs.#ctor(Exiled.API.Features.Player,Lift.Elevator,Lift,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.InteractingElevatorEventArgs"/> class.
            </summary>
            <param name="player"><inheritdoc cref="P:Exiled.Events.EventArgs.InteractingElevatorEventArgs.Player"/></param>
            <param name="elevator"><inheritdoc cref="P:Exiled.Events.EventArgs.InteractingElevatorEventArgs.Elevator"/></param>
            <param name="lift"><inheritdoc cref="P:Exiled.Events.EventArgs.InteractingElevatorEventArgs.Type"/></param>
            <param name="isAllowed"><inheritdoc cref="P:Exiled.Events.EventArgs.InteractingElevatorEventArgs.IsAllowed"/></param>
        </member>
        <member name="P:Exiled.Events.EventArgs.InteractingElevatorEventArgs.Player">
            <summary>
            Gets the player who's interacting with the elevator.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.InteractingElevatorEventArgs.Elevator">
            <summary>
            Gets the <see cref="T:Lift.Elevator"/> instance.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.InteractingElevatorEventArgs.Status">
            <summary>
            Gets the <see cref="T:Lift"/> current <see cref="T:Lift.Status"/>.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.InteractingElevatorEventArgs.Type">
            <summary>
            Gets the <see cref="T:Exiled.API.Enums.ElevatorType"/>.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.InteractingElevatorEventArgs.IsAllowed">
            <summary>
            Gets or sets a value indicating whether the event can be executed or not.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.InteractingLockerEventArgs">
            <summary>
            Contains all informations before a player interacts with a locker.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.InteractingLockerEventArgs.#ctor(Exiled.API.Features.Player,Locker,LockerChamber,System.Byte,System.Byte,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.InteractingLockerEventArgs"/> class.
            </summary>
            <param name="player"><inheritdoc cref="P:Exiled.Events.EventArgs.InteractingLockerEventArgs.Player"/></param>
            <param name="locker"><inheritdoc cref="P:Exiled.Events.EventArgs.InteractingLockerEventArgs.Locker"/></param>
            <param name="lockerChamber"><inheritdoc cref="P:Exiled.Events.EventArgs.InteractingLockerEventArgs.Chamber"/></param>
            <param name="lockerId"><inheritdoc cref="P:Exiled.Events.EventArgs.InteractingLockerEventArgs.LockerId"/></param>
            <param name="chamberId"><inheritdoc cref="P:Exiled.Events.EventArgs.InteractingLockerEventArgs.ChamberId"/></param>
            <param name="isAllowed"><inheritdoc cref="P:Exiled.Events.EventArgs.InteractingLockerEventArgs.IsAllowed"/></param>
        </member>
        <member name="P:Exiled.Events.EventArgs.InteractingLockerEventArgs.Player">
            <summary>
            Gets the player who's interacting with the locker.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.InteractingLockerEventArgs.Locker">
            <summary>
            Gets the <see cref="P:Exiled.Events.EventArgs.InteractingLockerEventArgs.Locker"/> instance.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.InteractingLockerEventArgs.Chamber">
            <summary>
            Gets the interacting chamber.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.InteractingLockerEventArgs.Id">
            <inheritdoc cref="P:Exiled.Events.EventArgs.InteractingLockerEventArgs.LockerId" />
        </member>
        <member name="P:Exiled.Events.EventArgs.InteractingLockerEventArgs.LockerId">
            <summary>
            Gets the locker id.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.InteractingLockerEventArgs.ChamberId">
            <summary>
            Gets the chamber id.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.InteractingLockerEventArgs.IsAllowed">
            <summary>
            Gets or sets a value indicating whether the event can be executed or not.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.InteractingTeslaEventArgs">
            <summary>
            Contains all informations before a player triggers a tesla through SCP-079.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.InteractingTeslaEventArgs.#ctor(Exiled.API.Features.Player,TeslaGate,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.InteractingTeslaEventArgs"/> class.
            </summary>
            <param name="player"><inheritdoc cref="P:Exiled.Events.EventArgs.InteractingTeslaEventArgs.Player"/></param>
            <param name="tesla"><inheritdoc cref="P:Exiled.Events.EventArgs.InteractingTeslaEventArgs.Tesla"/></param>
            <param name="isAllowed"><inheritdoc cref="P:Exiled.Events.EventArgs.InteractingTeslaEventArgs.IsAllowed"/></param>
        </member>
        <member name="P:Exiled.Events.EventArgs.InteractingTeslaEventArgs.Player">
            <summary>
            Gets the player who's triggering the tesla through SCP-079.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.InteractingTeslaEventArgs.Tesla">
            <summary>
            Gets the tesla game object, that SCP-079 is triggering.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.InteractingTeslaEventArgs.IsAllowed">
            <summary>
            Gets or sets a value indicating whether the event can be executed or not.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.IntercomSpeakingEventArgs">
            <summary>
            Contains all informations before a player speaks to the itercom.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.IntercomSpeakingEventArgs.#ctor(Exiled.API.Features.Player,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.IntercomSpeakingEventArgs"/> class.
            </summary>
            <param name="player"><inheritdoc cref="P:Exiled.Events.EventArgs.IntercomSpeakingEventArgs.Player"/></param>
            <param name="isAllowed"><inheritdoc cref="P:Exiled.Events.EventArgs.IntercomSpeakingEventArgs.IsAllowed"/></param>
        </member>
        <member name="P:Exiled.Events.EventArgs.IntercomSpeakingEventArgs.Player">
            <summary>
            Gets the player who's going to speak to the intercom.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.IntercomSpeakingEventArgs.IsAllowed">
            <summary>
            Gets or sets a value indicating whether the event can be executed or not.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.ItemDroppedEventArgs">
            <summary>
            Contains all informations after a player drops an item.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.ItemDroppedEventArgs.#ctor(Exiled.API.Features.Player,Pickup)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.ItemDroppedEventArgs"/> class.
            </summary>
            <param name="player"><inheritdoc cref="P:Exiled.Events.EventArgs.ItemDroppedEventArgs.Player"/></param>
            <param name="pickup"><inheritdoc cref="P:Exiled.Events.EventArgs.ItemDroppedEventArgs.Pickup"/></param>
        </member>
        <member name="P:Exiled.Events.EventArgs.ItemDroppedEventArgs.Player">
            <summary>
            Gets the player who dropped the item.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.ItemDroppedEventArgs.Pickup">
            <summary>
            Gets the dropped pickup.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.JoinedEventArgs">
            <summary>
            Contains all player's informations, after he joins the server.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.JoinedEventArgs.#ctor(Exiled.API.Features.Player)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.JoinedEventArgs"/> class.
            </summary>
            <param name="player">The joined player.</param>
        </member>
        <member name="P:Exiled.Events.EventArgs.JoinedEventArgs.Player">
            <summary>
            Gets the joined player.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.KickedEventArgs">
            <summary>
            Contains all iformations after banning a player from the server.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.KickedEventArgs.#ctor(Exiled.API.Features.Player,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.KickedEventArgs"/> class.
            </summary>
            <param name="player"><inheritdoc cref="P:Exiled.Events.EventArgs.KickedEventArgs.Player"/></param>
            <param name="reason"><inheritdoc cref="P:Exiled.Events.EventArgs.KickedEventArgs.Reason"/></param>
            <param name="isAllowed"><inheritdoc cref="P:Exiled.Events.EventArgs.KickedEventArgs.IsAllowed"/></param>
        </member>
        <member name="P:Exiled.Events.EventArgs.KickedEventArgs.Player">
            <summary>
            Gets the kicked player.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.KickedEventArgs.Reason">
            <summary>
            Gets or sets the kick reason.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.KickedEventArgs.IsAllowed">
            <summary>
            Gets or sets a value indicating whether the event can be executed or not.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.KickingEventArgs">
            <summary>
            Contains all informations before kicking a player.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.KickingEventArgs.#ctor(Exiled.API.Features.Player,Exiled.API.Features.Player,System.String,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.KickingEventArgs"/> class.
            </summary>
            <param name="target"><inheritdoc cref="P:Exiled.Events.EventArgs.KickingEventArgs.Target"/></param>
            <param name="issuer"><inheritdoc cref="P:Exiled.Events.EventArgs.KickingEventArgs.Issuer"/></param>
            <param name="reason"><inheritdoc cref="P:Exiled.Events.EventArgs.KickingEventArgs.Reason"/></param>
            <param name="fullMessage"><inheritdoc cref="P:Exiled.Events.EventArgs.KickingEventArgs.FullMessage"/></param>
            <param name="isAllowed"><inheritdoc cref="P:Exiled.Events.EventArgs.KickingEventArgs.IsAllowed"/></param>
        </member>
        <member name="P:Exiled.Events.EventArgs.KickingEventArgs.Target">
            <summary>
            Gets or sets the ban target.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.KickingEventArgs.Issuer">
            <summary>
            Gets or sets the ban issuer.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.KickingEventArgs.Reason">
            <summary>
            Gets or sets the kick reason.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.KickingEventArgs.FullMessage">
            <summary>
            Gets or sets the full kick message.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.KickingEventArgs.IsAllowed">
            <summary>
            Gets or sets a value indicating whether the event can be executed or not.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.KickingEventArgs.LogBanChange(System.String)">
            <summary>
            Logs the kick, anti-backdoor protection from malicious plugins.
            </summary>
            <param name="message">The message to be logged.</param>
        </member>
        <member name="T:Exiled.Events.EventArgs.LeftEventArgs">
            <summary>
            Contains all player's information, after he leaves the server.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.LeftEventArgs.#ctor(Exiled.API.Features.Player)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.LeftEventArgs"/> class.
            </summary>
            <param name="player">The player who left the server.</param>
        </member>
        <member name="T:Exiled.Events.EventArgs.LocalReportingEventArgs">
            <summary>
            Contains information about the report to local administrators.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.LocalReportingEventArgs.#ctor(Exiled.API.Features.Player,Exiled.API.Features.Player,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.LocalReportingEventArgs"/> class.
            </summary>
            <param name="issuer"><inheritdoc cref="P:Exiled.Events.EventArgs.LocalReportingEventArgs.Issuer"/></param>
            <param name="target"><inheritdoc cref="P:Exiled.Events.EventArgs.LocalReportingEventArgs.Target"/></param>
            <param name="reason"><inheritdoc cref="P:Exiled.Events.EventArgs.LocalReportingEventArgs.Reason"/></param>
            <param name="isAllowed"><inheritdoc cref="P:Exiled.Events.EventArgs.LocalReportingEventArgs.IsAllowed"/></param>
        </member>
        <member name="P:Exiled.Events.EventArgs.LocalReportingEventArgs.Issuer">
            <summary>
            Gets the report issuer.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.LocalReportingEventArgs.Target">
            <summary>
            Gets the report target.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.LocalReportingEventArgs.Reason">
            <summary>
            Gets or sets the report reason.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.LocalReportingEventArgs.IsAllowed">
            <summary>
            Gets or sets a value indicating whether the process can be processed or not.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.OpeningGeneratorEventArgs">
            <summary>
            Contains all informations before a player opens a generator.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.OpeningGeneratorEventArgs.#ctor(Exiled.API.Features.Player,Generator079,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.OpeningGeneratorEventArgs"/> class.
            </summary>
            <param name="player"><inheritdoc cref="P:Exiled.Events.EventArgs.OpeningGeneratorEventArgs.Player"/></param>
            <param name="generator"><inheritdoc cref="P:Exiled.Events.EventArgs.OpeningGeneratorEventArgs.Generator"/></param>
            <param name="isAllowed"><inheritdoc cref="P:Exiled.Events.EventArgs.OpeningGeneratorEventArgs.IsAllowed"/></param>
        </member>
        <member name="P:Exiled.Events.EventArgs.OpeningGeneratorEventArgs.Player">
            <summary>
            Gets the player who's opening the generator.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.OpeningGeneratorEventArgs.Generator">
            <summary>
            Gets the generator that is opening.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.OpeningGeneratorEventArgs.IsAllowed">
            <summary>
            Gets or sets a value indicating whether the event can be executed or not.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.PickingUpItemEventArgs">
            <summary>
            Contains all informations before a player picks up an item.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.PickingUpItemEventArgs.#ctor(Exiled.API.Features.Player,Pickup,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.PickingUpItemEventArgs"/> class.
            </summary>
            <param name="player">The player who's picking up the item.</param>
            <param name="pickup">The pickup to be picked up.</param>
            <param name="isAllowed"><inheritdoc cref="P:Exiled.Events.EventArgs.PickingUpItemEventArgs.IsAllowed"/></param>
        </member>
        <member name="P:Exiled.Events.EventArgs.PickingUpItemEventArgs.IsAllowed">
            <summary>
            Gets or sets a value indicating whether the event can be executed or not.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.PlacingBloodEventArgs">
            <summary>
            Contains all informations before a player places blood.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.PlacingBloodEventArgs.#ctor(Exiled.API.Features.Player,UnityEngine.Vector3,System.Int32,System.Single,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.PlacingBloodEventArgs"/> class.
            </summary>
            <param name="player"><inheritdoc cref="P:Exiled.Events.EventArgs.PlacingBloodEventArgs.Player"/></param>
            <param name="position"><inheritdoc cref="P:Exiled.Events.EventArgs.PlacingBloodEventArgs.Position"/></param>
            <param name="type"><inheritdoc cref="P:Exiled.Events.EventArgs.PlacingBloodEventArgs.Type"/></param>
            <param name="multiplier"><inheritdoc cref="P:Exiled.Events.EventArgs.PlacingBloodEventArgs.Multiplier"/></param>
            <param name="isAllowed"><inheritdoc cref="P:Exiled.Events.EventArgs.PlacingBloodEventArgs.IsAllowed"/></param>
        </member>
        <member name="P:Exiled.Events.EventArgs.PlacingBloodEventArgs.Player">
            <summary>
            Gets the player who's placing the blood.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.PlacingBloodEventArgs.Position">
            <summary>
            Gets or sets the blood placing position.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.PlacingBloodEventArgs.Type">
            <summary>
            Gets or sets the blood type.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.PlacingBloodEventArgs.Multiplier">
            <summary>
            Gets or sets the blood multiplier.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.PlacingBloodEventArgs.IsAllowed">
            <summary>
            Gets or sets a value indicating whether the event can be executed or not.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.PlacingDecalEventArgs">
            <summary>
            Contains all informations before placing a decal.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.PlacingDecalEventArgs.#ctor(Exiled.API.Features.Player,UnityEngine.Vector3,UnityEngine.Quaternion,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.PlacingDecalEventArgs"/> class.
            </summary>
            <param name="owner"><inheritdoc cref="P:Exiled.Events.EventArgs.PlacingDecalEventArgs.Owner"/></param>
            <param name="position"><inheritdoc cref="P:Exiled.Events.EventArgs.PlacingDecalEventArgs.Position"/></param>
            <param name="rotation"><inheritdoc cref="P:Exiled.Events.EventArgs.PlacingDecalEventArgs.Rotation"/></param>
            <param name="type"><inheritdoc cref="P:Exiled.Events.EventArgs.PlacingDecalEventArgs.Type"/></param>
            <param name="isAllowed"><inheritdoc cref="P:Exiled.Events.EventArgs.PlacingDecalEventArgs.IsAllowed"/></param>
        </member>
        <member name="P:Exiled.Events.EventArgs.PlacingDecalEventArgs.Owner">
            <summary>
            Gets the decal owner.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.PlacingDecalEventArgs.Position">
            <summary>
            Gets or sets the decal position.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.PlacingDecalEventArgs.Rotation">
            <summary>
            Gets or sets the decal rotation.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.PlacingDecalEventArgs.Type">
            <summary>
            Gets or sets the decal type.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.PlacingDecalEventArgs.IsAllowed">
            <summary>
            Gets or sets a value indicating whether the event can be executed or not.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.PreAuthenticatingEventArgs">
            <summary>
            Contains all informations before pre-autenticating a player.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.PreAuthenticatingEventArgs.#ctor(System.String,LiteNetLib.ConnectionRequest,System.Int32,System.Byte,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.PreAuthenticatingEventArgs"/> class.
            </summary>
            <param name="userId"><inheritdoc cref="P:Exiled.Events.EventArgs.PreAuthenticatingEventArgs.UserId"/></param>
            <param name="request"><inheritdoc cref="P:Exiled.Events.EventArgs.PreAuthenticatingEventArgs.Request"/></param>
            <param name="readerStartPosition"><inheritdoc cref="P:Exiled.Events.EventArgs.PreAuthenticatingEventArgs.ReaderStartPosition"/></param>
            <param name="flags"><inheritdoc cref="P:Exiled.Events.EventArgs.PreAuthenticatingEventArgs.Flags"/></param>
            <param name="country"><inheritdoc cref="P:Exiled.Events.EventArgs.PreAuthenticatingEventArgs.Country"/></param>
            <param name="isAllowed"><inheritdoc cref="P:Exiled.Events.EventArgs.PreAuthenticatingEventArgs.IsAllowed"/></param>
        </member>
        <member name="P:Exiled.Events.EventArgs.PreAuthenticatingEventArgs.UserId">
            <summary>
            Gets the player's user id.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.PreAuthenticatingEventArgs.ReaderStartPosition">
            <summary>
            Gets the reader starting position for reading the preauth.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.PreAuthenticatingEventArgs.Flags">
            <summary>
            Gets the flags.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.PreAuthenticatingEventArgs.Country">
            <summary>
            Gets the player's country.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.PreAuthenticatingEventArgs.Request">
            <summary>
            Gets the connection request.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.PreAuthenticatingEventArgs.IsAllowed">
            <summary>
            Gets a value indicating whether the player can be authenticated or not.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.PreAuthenticatingEventArgs.Delay(System.Byte,System.Boolean)">
            <summary>
            Delays the connection.
            </summary>
            <param name="seconds">The delay in seconds.</param>
            <param name="isForced">Indicates whether the player has to be rejected forcefully or not.</param>
        </member>
        <member name="M:Exiled.Events.EventArgs.PreAuthenticatingEventArgs.Redirect(System.UInt16,System.Boolean)">
            <summary>
            Rejects the player and redirects them to another server port.
            </summary>
            <param name="port">The new server port.</param>
            <param name="isForced">Indicates whether the player has to be rejected forcefully or not.</param>
        </member>
        <member name="M:Exiled.Events.EventArgs.PreAuthenticatingEventArgs.RejectBanned(System.String,System.DateTime,System.Boolean)">
            <summary>
            Rejects a player who's trying to authenticate.
            </summary>
            <param name="banReason">The ban reason.</param>
            <param name="expiration">The ban expiration time.</param>
            <param name="isForced">Indicates whether the player has to be rejected forcefully or not.</param>
        </member>
        <member name="M:Exiled.Events.EventArgs.PreAuthenticatingEventArgs.RejectBanned(System.String,System.Int64,System.Boolean)">
            <summary>
            Rejects a player who's trying to authenticate.
            </summary>
            <param name="banReason">The ban reason.</param>
            <param name="expiration">The ban expiration time in .NET Ticks.</param>
            <param name="isForced">Indicates whether the player has to be rejected forcefully or not.</param>
        </member>
        <member name="M:Exiled.Events.EventArgs.PreAuthenticatingEventArgs.Reject(LiteNetLib.Utils.NetDataWriter,System.Boolean)">
            <summary>
            Rejects a player who's trying to authenticate.
            </summary>
            <param name="writer">The <see cref="T:LiteNetLib.Utils.NetDataWriter"/> instance.</param>
            <param name="isForced">Indicates whether the player has to be rejected forcefully or not.</param>
        </member>
        <member name="M:Exiled.Events.EventArgs.PreAuthenticatingEventArgs.Reject(System.String,System.Boolean)">
            <summary>
            Rejects a player who's trying to authenticate.
            </summary>
            <param name="rejectionReason">The custom rejection reason.</param>
            <param name="isForced">Indicates whether the player has to be rejected forcefully or not.</param>
        </member>
        <member name="M:Exiled.Events.EventArgs.PreAuthenticatingEventArgs.Reject(RejectionReason,System.Boolean,System.String,System.Int64,System.Byte,System.UInt16)">
            <summary>
            Rejects a player who's trying to authenticate.
            </summary>
            <param name="rejectionReason">The rejection reason.</param>
            <param name="isForced">Indicates whether the player has to be rejected forcefully or not.</param>
            <param name="customReason">The custom rejection reason (Banned and Custom reasons only).</param>
            <param name="expiration">The ban expiration ticks (Banned reason only).</param>
            <param name="seconds">The delay in seconds (Delay reason only).</param>
            <param name="port">The redirection port (Redirect reason only).</param>
        </member>
        <member name="M:Exiled.Events.EventArgs.PreAuthenticatingEventArgs.Disallow">
            <summary>
            Disallows the connection without sending any reason. Should only be used when the connection has already been terminated by the plugin itself.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.ReceivingEffectEventArgs">
            <summary>
            Contains all information before a player receives a <see cref="T:CustomPlayerEffects.PlayerEffect"/>.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.ReceivingEffectEventArgs.#ctor(Exiled.API.Features.Player,CustomPlayerEffects.PlayerEffect,System.Byte,System.Byte)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.ReceivingEffectEventArgs"/> class.
            </summary>
            <param name="player">The <see cref="P:Exiled.Events.EventArgs.ReceivingEffectEventArgs.Player"/> receiving the effect.</param>
            <param name="effect">The <see cref="T:CustomPlayerEffects.PlayerEffect"/> being added to the player.</param>
            <param name="state">The state the effect is being changed to.</param>
            <param name="currentState">The current state of the effect being changed.</param>
        </member>
        <member name="P:Exiled.Events.EventArgs.ReceivingEffectEventArgs.Player">
            <summary>
            Gets the <see cref="P:Exiled.Events.EventArgs.ReceivingEffectEventArgs.Player"/> receiving the effect.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.ReceivingEffectEventArgs.Effect">
            <summary>
            Gets the <see cref="T:CustomPlayerEffects.PlayerEffect"/> being received.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.ReceivingEffectEventArgs.IsAllowed">
            <summary>
            Gets or sets a value indicating whether or not the effect will be allowed to be applied.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.ReceivingEffectEventArgs.Duration">
            <summary>
            Gets or sets a value indicating how long the effect will last.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.ReceivingEffectEventArgs.State">
            <summary>
            Gets or sets the value of the new state of the effect. Setting this to 0 is the same as setting IsAllowed to false.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.ReceivingEffectEventArgs.CurrentState">
            <summary>
            Gets the value of the current state of this effect on the player.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.RecontainedEventArgs">
            <summary>
            Contains informations after SCP-079 recontainming.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.RecontainedEventArgs.#ctor(Exiled.API.Features.Player)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.RecontainedEventArgs"/> class.
            </summary>
            <param name="target"><inheritdoc cref="P:Exiled.Events.EventArgs.RecontainedEventArgs.Target"/></param>
        </member>
        <member name="P:Exiled.Events.EventArgs.RecontainedEventArgs.Target">
            <summary>
            Gets the player that was SCP-079.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.ReloadingWeaponEventArgs">
            <summary>
            Contains all informations before a player reloads his weapon.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.ReloadingWeaponEventArgs.#ctor(Exiled.API.Features.Player,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.ReloadingWeaponEventArgs"/> class.
            </summary>
            <param name="player"><inheritdoc cref="P:Exiled.Events.EventArgs.ReloadingWeaponEventArgs.Player"/></param>
            <param name="isAnimationOnly"><inheritdoc cref="P:Exiled.Events.EventArgs.ReloadingWeaponEventArgs.IsAnimationOnly"/></param>
            <param name="isAllowed"><inheritdoc cref="P:Exiled.Events.EventArgs.ReloadingWeaponEventArgs.IsAllowed"/></param>
        </member>
        <member name="P:Exiled.Events.EventArgs.ReloadingWeaponEventArgs.Player">
            <summary>
            Gets the player who's reloading the weapon.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.ReloadingWeaponEventArgs.IsAnimationOnly">
            <summary>
            Gets a value indicating whether only the reload animation is being reproduced or not.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.ReloadingWeaponEventArgs.IsAllowed">
            <summary>
            Gets or sets a value indicating whether the event can be executed or not.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.RemovingHandcuffsEventArgs">
            <summary>
            Contains all informations freeing a handcuffed player.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.RemovingHandcuffsEventArgs.#ctor(Exiled.API.Features.Player,Exiled.API.Features.Player,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.RemovingHandcuffsEventArgs"/> class.
            </summary>
            <param name="cuffer">The cuffer player.</param>
            <param name="target">The target player to be uncuffed.</param>
            <param name="isAllowed">Indicates whether the event can be executed or not.</param>
        </member>
        <member name="T:Exiled.Events.EventArgs.ReportingCheaterEventArgs">
            <summary>
            Contains all informations before reporting a cheater.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.ReportingCheaterEventArgs.#ctor(Exiled.API.Features.Player,Exiled.API.Features.Player,System.Int32,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.ReportingCheaterEventArgs"/> class.
            </summary>
            <param name="reporter"><inheritdoc cref="P:Exiled.Events.EventArgs.ReportingCheaterEventArgs.Reporter"/></param>
            <param name="reported"><inheritdoc cref="P:Exiled.Events.EventArgs.ReportingCheaterEventArgs.Reported"/></param>
            <param name="serverPort"><inheritdoc cref="P:Exiled.Events.EventArgs.ReportingCheaterEventArgs.ServerPort"/></param>
            <param name="reason"><inheritdoc cref="P:Exiled.Events.EventArgs.ReportingCheaterEventArgs.Reason"/></param>
            <param name="isAllowed"><inheritdoc cref="P:Exiled.Events.EventArgs.ReportingCheaterEventArgs.IsAllowed"/></param>
        </member>
        <member name="P:Exiled.Events.EventArgs.ReportingCheaterEventArgs.Reporter">
            <summary>
            Gets the reporter player.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.ReportingCheaterEventArgs.Reported">
            <summary>
            Gets the reported player.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.ReportingCheaterEventArgs.ServerPort">
            <summary>
            Gets the server id.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.ReportingCheaterEventArgs.Reason">
            <summary>
            Gets or sets the report reason.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.ReportingCheaterEventArgs.IsAllowed">
            <summary>
            Gets or sets a value indicating whether the event can be executed or not.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.RespawningTeamEventArgs">
            <summary>
            Contains all informations before spawning a wave of <see cref="F:Team.CHI"/> or <see cref="F:Team.MTF"/>..
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.RespawningTeamEventArgs.#ctor(System.Collections.Generic.List{Exiled.API.Features.Player},System.Int32,Respawning.SpawnableTeamType)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.RespawningTeamEventArgs"/> class.
            </summary>
            <param name="players"><inheritdoc cref="P:Exiled.Events.EventArgs.RespawningTeamEventArgs.Players"/></param>
            <param name="maximumRespawnAmount"><inheritdoc cref="P:Exiled.Events.EventArgs.RespawningTeamEventArgs.MaximumRespawnAmount"/></param>
            <param name="nextKnownTeam"><inheritdoc cref="P:Exiled.Events.EventArgs.RespawningTeamEventArgs.NextKnownTeam"/></param>
        </member>
        <member name="P:Exiled.Events.EventArgs.RespawningTeamEventArgs.Players">
            <summary>
            Gets the list of players that are going to be respawned.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.RespawningTeamEventArgs.MaximumRespawnAmount">
            <summary>
            Gets or sets the maximum amount of respawnable players.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.RespawningTeamEventArgs.NextKnownTeam">
            <summary>
            Gets or sets a value indicating what the next respawnable team is..
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.RoundEndedEventArgs">
            <summary>
            Contains all information before ending a round.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.RoundEndedEventArgs.#ctor(Exiled.API.Enums.LeadingTeam,RoundSummary.SumInfo_ClassList,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.RoundEndedEventArgs"/> class.
            </summary>
            <param name="leadingTeam"><inheritdoc cref="P:Exiled.Events.EventArgs.RoundEndedEventArgs.LeadingTeam"/></param>
            <param name="classList"><inheritdoc cref="P:Exiled.Events.EventArgs.RoundEndedEventArgs.ClassList"/></param>
            <param name="timeToRestart"><inheritdoc cref="P:Exiled.Events.EventArgs.RoundEndedEventArgs.TimeToRestart"/></param>
        </member>
        <member name="P:Exiled.Events.EventArgs.RoundEndedEventArgs.LeadingTeam">
            <summary>
            Gets the leading team.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.RoundEndedEventArgs.ClassList">
            <summary>
            Gets or sets the round summary class list.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.RoundEndedEventArgs.TimeToRestart">
            <summary>
            Gets or sets the time to restart the next round.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.SendingConsoleCommandEventArgs">
            <summary>
            Contains all informations before sending a console message.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.SendingConsoleCommandEventArgs.#ctor(Exiled.API.Features.Player,System.String,System.Collections.Generic.List{System.String},System.Boolean,System.String,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.SendingConsoleCommandEventArgs"/> class.
            </summary>
            <param name="player"><inheritdoc cref="P:Exiled.Events.EventArgs.SendingConsoleCommandEventArgs.Player"/></param>
            <param name="name"><inheritdoc cref="P:Exiled.Events.EventArgs.SendingConsoleCommandEventArgs.Name"/></param>
            <param name="arguments"><inheritdoc cref="P:Exiled.Events.EventArgs.SendingConsoleCommandEventArgs.Arguments"/></param>
            <param name="isEncrypted"><inheritdoc cref="P:Exiled.Events.EventArgs.SendingConsoleCommandEventArgs.IsEncrypted"/></param>
            <param name="returnMessage"><inheritdoc cref="P:Exiled.Events.EventArgs.SendingConsoleCommandEventArgs.ReturnMessage"/></param>
            <param name="color"><inheritdoc cref="P:Exiled.Events.EventArgs.SendingConsoleCommandEventArgs.Color"/></param>
            <param name="isAllowed"><inheritdoc cref="P:Exiled.Events.EventArgs.SendingConsoleCommandEventArgs.Allow"/></param>
        </member>
        <member name="P:Exiled.Events.EventArgs.SendingConsoleCommandEventArgs.Player">
            <summary>
            Gets the player who's sending the command.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.SendingConsoleCommandEventArgs.Name">
            <summary>
            Gets the command name.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.SendingConsoleCommandEventArgs.Arguments">
            <summary>
            Gets the command arguments.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.SendingConsoleCommandEventArgs.IsEncrypted">
            <summary>
            Gets a value indicating whether the command is encrypted or not.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.SendingConsoleCommandEventArgs.ReturnMessage">
            <summary>
            Gets or sets the return message, that will be shown to the user in the console.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.SendingConsoleCommandEventArgs.Color">
            <summary>
            Gets or sets the color of the return message.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.SendingConsoleCommandEventArgs.Allow">
            <summary>
            Gets or sets a value indicating whether the event can be executed or not.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.SendingConsoleCommandEventArgs.IsAllowed">
            <summary>
            Gets or sets a value indicating whether the event can be executed or not.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.SendingRemoteAdminCommandEventArgs">
            <summary>
            Contains all informations before the SCP-914 machine upgrades items inside it.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.SendingRemoteAdminCommandEventArgs.#ctor(CommandSender,Exiled.API.Features.Player,System.String,System.Collections.Generic.List{System.String},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.SendingRemoteAdminCommandEventArgs"/> class.
            </summary>
            <param name="commandSender"><inheritdoc cref="P:Exiled.Events.EventArgs.SendingRemoteAdminCommandEventArgs.CommandSender"/></param>
            <param name="sender"><inheritdoc cref="P:Exiled.Events.EventArgs.SendingRemoteAdminCommandEventArgs.Sender"/></param>
            <param name="name"><inheritdoc cref="P:Exiled.Events.EventArgs.SendingRemoteAdminCommandEventArgs.Name"/></param>
            <param name="arguments"><inheritdoc cref="P:Exiled.Events.EventArgs.SendingRemoteAdminCommandEventArgs.Arguments"/></param>
            <param name="isAllowed"><inheritdoc cref="P:Exiled.Events.EventArgs.SendingRemoteAdminCommandEventArgs.IsAllowed"/></param>
        </member>
        <member name="P:Exiled.Events.EventArgs.SendingRemoteAdminCommandEventArgs.CommandSender">
            <summary>
            Gets the <see cref="P:Exiled.Events.EventArgs.SendingRemoteAdminCommandEventArgs.CommandSender"/> sending the command.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.SendingRemoteAdminCommandEventArgs.Sender">
            <summary>
            Gets the player who's sending the command.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.SendingRemoteAdminCommandEventArgs.Name">
            <summary>
            Gets the command name.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.SendingRemoteAdminCommandEventArgs.Arguments">
            <summary>
            Gets the command arguments.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.SendingRemoteAdminCommandEventArgs.ReplyMessage">
            <summary>
            Gets or sets the message that will be returned back to the <see cref="P:Exiled.Events.EventArgs.SendingRemoteAdminCommandEventArgs.CommandSender"/>.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.SendingRemoteAdminCommandEventArgs.Success">
            <summary>
            Gets or sets a value indicating whether whether or not the command was a success.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.SendingRemoteAdminCommandEventArgs.IsAllowed">
            <summary>
            Gets or sets a value indicating whether the event can be executed or not.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.ShootingEventArgs">
            <summary>
            Contains all informations before shooting with a weapon.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.ShootingEventArgs.#ctor(Exiled.API.Features.Player,UnityEngine.GameObject,UnityEngine.Vector3,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.ShootingEventArgs"/> class.
            </summary>
            <param name="shooter"><inheritdoc cref="P:Exiled.Events.EventArgs.ShootingEventArgs.Shooter"/></param>
            <param name="target"><inheritdoc cref="P:Exiled.Events.EventArgs.ShootingEventArgs.Target"/></param>
            <param name="position"><inheritdoc cref="P:Exiled.Events.EventArgs.ShootingEventArgs.Position"/></param>
            <param name="isAllowed"><inheritdoc cref="P:Exiled.Events.EventArgs.ShootingEventArgs.IsAllowed"/></param>
        </member>
        <member name="P:Exiled.Events.EventArgs.ShootingEventArgs.Shooter">
            <summary>
            Gets the player who's shooting.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.ShootingEventArgs.Target">
            <summary>
            Gets the target the player's shooting at.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.ShootingEventArgs.Position">
            <summary>
            Gets or sets the position of the shoot.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.ShootingEventArgs.IsAllowed">
            <summary>
            Gets or sets a value indicating whether the event can be executed or not.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.ShotEventArgs">
            <summary>
            Contains all informations after a player has shot.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.ShotEventArgs.#ctor(Exiled.API.Features.Player,UnityEngine.GameObject,System.String,System.Single,System.Single,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.ShotEventArgs"/> class.
            </summary>
            <param name="shooter"><inheritdoc cref="P:Exiled.Events.EventArgs.ShotEventArgs.Shooter"/></param>
            <param name="target"><inheritdoc cref="P:Exiled.Events.EventArgs.ShotEventArgs.Target"/></param>
            <param name="hitboxType"><inheritdoc cref="P:Exiled.Events.EventArgs.ShotEventArgs.HitboxType"/></param>
            <param name="distance"><inheritdoc cref="P:Exiled.Events.EventArgs.ShotEventArgs.Distance"/></param>
            <param name="damage"><inheritdoc cref="P:Exiled.Events.EventArgs.ShotEventArgs.Damage"/></param>
            <param name="canHurt"><inheritdoc cref="P:Exiled.Events.EventArgs.ShotEventArgs.CanHurt"/></param>
        </member>
        <member name="P:Exiled.Events.EventArgs.ShotEventArgs.Shooter">
            <summary>
            Gets the player who shot.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.ShotEventArgs.Target">
            <summary>
            Gets the target of the shot.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.ShotEventArgs.HitboxType">
            <summary>
            Gets the hitbox type of the shot.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.ShotEventArgs.Distance">
            <summary>
            Gets the shot distance.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.ShotEventArgs.Damage">
            <summary>
            Gets or sets the inflicted damage.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.ShotEventArgs.CanHurt">
            <summary>
            Gets or sets a value indicating whether the shot can hurt the target or notc.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.SpawningEventArgs">
            <summary>
            Contains all informations before spawning a player.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.SpawningEventArgs.#ctor(Exiled.API.Features.Player,RoleType,UnityEngine.Vector3,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.SpawningEventArgs"/> class.
            </summary>
            <param name="player"><inheritdoc cref="P:Exiled.Events.EventArgs.SpawningEventArgs.Player"/></param>
            <param name="roleType"><inheritdoc cref="P:Exiled.Events.EventArgs.SpawningEventArgs.RoleType"/></param>
            <param name="position"><inheritdoc cref="P:Exiled.Events.EventArgs.SpawningEventArgs.Position"/></param>
            <param name="rotationY"><inheritdoc cref="P:Exiled.Events.EventArgs.SpawningEventArgs.RotationY"/></param>
        </member>
        <member name="P:Exiled.Events.EventArgs.SpawningEventArgs.Player">
            <summary>
            Gets the spawning player.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.SpawningEventArgs.RoleType">
            <summary>
            Gets the player role type.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.SpawningEventArgs.Position">
            <summary>
            Gets or sets the player's spawning position.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.SpawningEventArgs.RotationY">
            <summary>
            Gets or sets the rotation y axis of the player.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.SpawningRagdollEventArgs">
            <summary>
            Contains all informations before spawning a player ragdoll.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.SpawningRagdollEventArgs.#ctor(Exiled.API.Features.Player,Exiled.API.Features.Player,UnityEngine.Vector3,UnityEngine.Quaternion,RoleType,PlayerStats.HitInfo,System.Boolean,System.String,System.String,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.SpawningRagdollEventArgs"/> class.
            </summary>
            <param name="killer"><inheritdoc cref="P:Exiled.Events.EventArgs.SpawningRagdollEventArgs.Killer"/></param>
            <param name="owner"><inheritdoc cref="P:Exiled.Events.EventArgs.SpawningRagdollEventArgs.Owner"/></param>
            <param name="position"><inheritdoc cref="P:Exiled.Events.EventArgs.SpawningRagdollEventArgs.Position"/></param>
            <param name="rotation"><inheritdoc cref="P:Exiled.Events.EventArgs.SpawningRagdollEventArgs.Rotation"/></param>
            <param name="roleType"><inheritdoc cref="P:Exiled.Events.EventArgs.SpawningRagdollEventArgs.RoleType"/></param>
            <param name="hinInformations"><inheritdoc cref="P:Exiled.Events.EventArgs.SpawningRagdollEventArgs.HitInformations"/></param>
            <param name="isRecallAllowed"><inheritdoc cref="P:Exiled.Events.EventArgs.SpawningRagdollEventArgs.IsRecallAllowed"/></param>
            <param name="dissonanceId"><inheritdoc cref="P:Exiled.Events.EventArgs.SpawningRagdollEventArgs.DissonanceId"/></param>
            <param name="playerName"><inheritdoc cref="P:Exiled.Events.EventArgs.SpawningRagdollEventArgs.PlayerNickname"/></param>
            <param name="playerId"><inheritdoc cref="P:Exiled.Events.EventArgs.SpawningRagdollEventArgs.PlayerId"/></param>
            <param name="isAllowed"><inheritdoc cref="P:Exiled.Events.EventArgs.SpawningRagdollEventArgs.IsAllowed"/></param>
        </member>
        <member name="P:Exiled.Events.EventArgs.SpawningRagdollEventArgs.Killer">
            <summary>
            Gets the player who killed the owner of the ragdoll.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.SpawningRagdollEventArgs.Owner">
            <summary>
            Gets the player, owner of the ragdoll.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.SpawningRagdollEventArgs.Position">
            <summary>
            Gets or sets the spawning position of the ragdoll.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.SpawningRagdollEventArgs.Rotation">
            <summary>
            Gets or sets the ragdoll rotation.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.SpawningRagdollEventArgs.RoleType">
            <summary>
            Gets or sets the role type of the ragdoll owner.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.SpawningRagdollEventArgs.HitInformations">
            <summary>
            Gets or sets the hit informations on the ragdoll.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.SpawningRagdollEventArgs.IsRecallAllowed">
            <summary>
            Gets or sets a value indicating whether the player can be revived by SCP-049 or not.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.SpawningRagdollEventArgs.DissonanceId">
            <summary>
            Gets or sets the ragdoll dissonance id.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.SpawningRagdollEventArgs.PlayerNickname">
            <summary>
            Gets or sets the ragdoll player nickname.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.SpawningRagdollEventArgs.PlayerId">
            <summary>
            Gets or sets the ragdoll playr id.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.SpawningRagdollEventArgs.IsAllowed">
            <summary>
            Gets or sets a value indicating whether the event can be executed or not.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.StartingEventArgs">
            <summary>
            Contains all informations before the SCP-914 machine upgrades items inside it.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.StartingEventArgs.#ctor(Exiled.API.Features.Player,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.StartingEventArgs"/> class.
            </summary>
            <param name="player">The player who's going to stop the warhead.</param>
            <param name="isAllowed">Indicating whether the event can be executed or not.</param>
        </member>
        <member name="T:Exiled.Events.EventArgs.StartingRecallEventArgs">
            <summary>
            Contains all informations before a player is infected.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.StartingRecallEventArgs.#ctor(Exiled.API.Features.Player,Exiled.API.Features.Player,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.StartingRecallEventArgs"/> class.
            </summary>
            <param name="target"><inheritdoc cref="P:Exiled.Events.EventArgs.StartingRecallEventArgs.Target"/></param>
            <param name="scp049"><inheritdoc cref="P:Exiled.Events.EventArgs.StartingRecallEventArgs.Scp049"/></param>
            <param name="isAllowed"><inheritdoc cref="P:Exiled.Events.EventArgs.StartingRecallEventArgs.IsAllowed"/></param>
        </member>
        <member name="P:Exiled.Events.EventArgs.StartingRecallEventArgs.Target">
            <summary>
            Gets the player who's getting infected.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.StartingRecallEventArgs.Scp049">
            <summary>
            Gets the player who is SCP049.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.StartingRecallEventArgs.IsAllowed">
            <summary>
            Gets or sets a value indicating whether the event can be executed or not.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.StartingSpeakerEventArgs">
            <summary>
            Contains all informations before a player triggers a speaker through SCP-079.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.StartingSpeakerEventArgs.#ctor(Exiled.API.Features.Player,Exiled.API.Features.Room,System.Single,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.StartingSpeakerEventArgs"/> class.
            </summary>
            <param name="player"><inheritdoc cref="P:Exiled.Events.EventArgs.StartingSpeakerEventArgs.Player"/></param>
            <param name="room"><inheritdoc cref="P:Exiled.Events.EventArgs.StartingSpeakerEventArgs.Room"/></param>
            <param name="apDrain"><inheritdoc cref="P:Exiled.Events.EventArgs.StartingSpeakerEventArgs.APDrain"/></param>
            <param name="isAllowed"><inheritdoc cref="P:Exiled.Events.EventArgs.StartingSpeakerEventArgs.IsAllowed"/></param>
        </member>
        <member name="P:Exiled.Events.EventArgs.StartingSpeakerEventArgs.Player">
            <summary>
            Gets the player who's triggering the speaker through SCP-079.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.StartingSpeakerEventArgs.Room">
            <summary>
            Gets the room where the camera is located, that SCP-079 is triggering.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.StartingSpeakerEventArgs.APDrain">
            <summary>
            Gets or sets the amount of AP that will be removed for the first time when using speakers through SCP-079.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.StartingSpeakerEventArgs.IsAllowed">
            <summary>
            Gets or sets a value indicating whether the event can be executed or not.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.StartPryingGateEventArgs">
            <summary>
            Contains all information before SCP-096 starts prying a gate open.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.StartPryingGateEventArgs.#ctor(Exiled.API.Features.Player,Door)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.StartPryingGateEventArgs"/> class.
            </summary>
            <param name="scp096">The Scp096 who is triggering the event.</param>
            <param name="gate">The gate to be pried open.</param>
        </member>
        <member name="P:Exiled.Events.EventArgs.StartPryingGateEventArgs.Player">
            <summary>
            Gets the <see cref="P:Exiled.Events.EventArgs.StartPryingGateEventArgs.Player"/> object of the SCP-096.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.StartPryingGateEventArgs.Gate">
            <summary>
            Gets the <see cref="T:Door"/> to be pried open.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.StartPryingGateEventArgs.IsAllowed">
            <summary>
            Gets or Sets a value indicating whether or not they should be allowed to pry the gate open.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.StoppingEventArgs">
            <summary>
            Contains all informations before stopping the warhead.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.StoppingEventArgs.#ctor(Exiled.API.Features.Player,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.StoppingEventArgs"/> class.
            </summary>
            <param name="player"><inheritdoc cref="P:Exiled.Events.EventArgs.StoppingEventArgs.Player"/></param>
            <param name="isAllowed"><inheritdoc cref="P:Exiled.Events.EventArgs.StoppingEventArgs.IsAllowed"/></param>
        </member>
        <member name="P:Exiled.Events.EventArgs.StoppingEventArgs.Player">
            <summary>
            Gets the player who's going to stop the warhead.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.StoppingEventArgs.IsAllowed">
            <summary>
            Gets or sets a value indicating whether the event can be executed or not.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.StoppingMedicalItemEventArgs">
            <summary>
            Contains all informations before the SCP-914 machine upgrades items inside it.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.StoppingMedicalItemEventArgs.#ctor(Exiled.API.Features.Player,ItemType,System.Single,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.StoppingMedicalItemEventArgs"/> class.
            </summary>
            <param name="player">The player who's stopping the use of the medical item.</param>
            <param name="item">The medical item that won't be consumed.</param>
            <param name="cooldown">The cooldown left for completing the use of the medical item.</param>
            <param name="isAllowed"><inheritdoc cref="P:Exiled.Events.EventArgs.UsingMedicalItemEventArgs.IsAllowed"/></param>
        </member>
        <member name="P:Exiled.Events.EventArgs.StoppingMedicalItemEventArgs.Cooldown">
            <summary>
            Gets the medical item cooldown.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.StoppingSpeakerEventArgs">
            <summary>
            Contains all informations before a player stopping a speaker through SCP-079.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.StoppingSpeakerEventArgs.#ctor(Exiled.API.Features.Player,Exiled.API.Features.Room,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.StoppingSpeakerEventArgs"/> class.
            </summary>
            <param name="player"><inheritdoc cref="P:Exiled.Events.EventArgs.StoppingSpeakerEventArgs.Player"/></param>
            <param name="room"><inheritdoc cref="P:Exiled.Events.EventArgs.StoppingSpeakerEventArgs.Room"/></param>
            <param name="isAllowed"><inheritdoc cref="P:Exiled.Events.EventArgs.StoppingSpeakerEventArgs.IsAllowed"/></param>
        </member>
        <member name="P:Exiled.Events.EventArgs.StoppingSpeakerEventArgs.Player">
            <summary>
            Gets the player who's stopping the speaker through SCP-079.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.StoppingSpeakerEventArgs.Room">
            <summary>
            Gets the room where the camera is located, that SCP-079 is stopping.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.StoppingSpeakerEventArgs.IsAllowed">
            <summary>
            Gets or sets a value indicating whether the event can be executed or not.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.SyncingDataEventArgs">
            <summary>
            Contains all informations before syncing player's data with the server.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.SyncingDataEventArgs.#ctor(Exiled.API.Features.Player,UnityEngine.Vector2,System.Byte,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.SyncingDataEventArgs"/> class.
            </summary>
            <param name="player"><inheritdoc cref="P:Exiled.Events.EventArgs.SyncingDataEventArgs.Player"/></param>
            <param name="speed"><inheritdoc cref="P:Exiled.Events.EventArgs.SyncingDataEventArgs.Speed"/></param>
            <param name="currentAnimation"><inheritdoc cref="P:Exiled.Events.EventArgs.SyncingDataEventArgs.CurrentAnimation"/></param>
            <param name="isAllowed"><inheritdoc cref="P:Exiled.Events.EventArgs.SyncingDataEventArgs.IsAllowed"/></param>
        </member>
        <member name="P:Exiled.Events.EventArgs.SyncingDataEventArgs.Player">
            <summary>
            Gets the player of the syncing data.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.SyncingDataEventArgs.Speed">
            <summary>
            Gets the player's speed.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.SyncingDataEventArgs.CurrentAnimation">
            <summary>
            Gets or sets the current player's animation.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.SyncingDataEventArgs.IsAllowed">
            <summary>
            Gets or sets a value indicating whether the event can be executed or not.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.TeleportingEventArgs">
            <summary>
            Contains all informations before teleporting an SCP-106.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.TeleportingEventArgs.#ctor(Exiled.API.Features.Player,UnityEngine.Vector3,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.TeleportingEventArgs"/> class.
            </summary>
            <param name="player"><inheritdoc cref="P:Exiled.Events.EventArgs.TeleportingEventArgs.Player"/></param>
            <param name="portalPosition"><inheritdoc cref="P:Exiled.Events.EventArgs.TeleportingEventArgs.PortalPosition"/></param>
            <param name="isAllowed"><inheritdoc cref="P:Exiled.Events.EventArgs.TeleportingEventArgs.IsAllowed"/></param>
        </member>
        <member name="P:Exiled.Events.EventArgs.TeleportingEventArgs.Player">
            <summary>
            Gets the player who's controlling SCP-106.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.TeleportingEventArgs.PortalPosition">
            <summary>
            Gets or sets the portal position.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.TeleportingEventArgs.IsAllowed">
            <summary>
            Gets or sets a value indicating whether the event can be executed or not.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.ThrowingGrenadeEventArgs">
            <summary>
            Contains all informations before a player throws a greande.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.ThrowingGrenadeEventArgs.#ctor(Exiled.API.Features.Player,Grenades.GrenadeManager,System.Int32,System.Boolean,System.Double,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.ThrowingGrenadeEventArgs"/> class.
            </summary>
            <param name="player"><inheritdoc cref="P:Exiled.Events.EventArgs.ThrowingGrenadeEventArgs.Player"/></param>
            <param name="grenadeManager"><inheritdoc cref="P:Exiled.Events.EventArgs.ThrowingGrenadeEventArgs.GrenadeManager"/></param>
            <param name="id"><inheritdoc cref="P:Exiled.Events.EventArgs.ThrowingGrenadeEventArgs.Id"/></param>
            <param name="isSlow"><inheritdoc cref="P:Exiled.Events.EventArgs.ThrowingGrenadeEventArgs.IsSlow"/></param>
            <param name="fuseTime"><inheritdoc cref="P:Exiled.Events.EventArgs.ThrowingGrenadeEventArgs.FuseTime"/></param>
            <param name="isAllowed">Indicates whether the event can be executed or not.</param>
        </member>
        <member name="P:Exiled.Events.EventArgs.ThrowingGrenadeEventArgs.Player">
            <summary>
            Gets the player who's throwing the greande.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.ThrowingGrenadeEventArgs.GrenadeManager">
            <summary>
            Gets the <see cref="T:Grenades.GrenadeManager"/> instance.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.ThrowingGrenadeEventArgs.Id">
            <summary>
            Gets the grenade id.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.ThrowingGrenadeEventArgs.IsSlow">
            <summary>
             Gets or sets a value indicating whether the throw is slow or not.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.ThrowingGrenadeEventArgs.FuseTime">
            <summary>
            Gets or sets the fuse time.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.ThrowingGrenadeEventArgs.IsAllowed">
            <summary>
            Gets or sets a value indicating whether the event can be executed or not.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.TriggeringTeslaEventArgs">
            <summary>
            Contains all informations before triggering a tesla.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.TriggeringTeslaEventArgs.#ctor(Exiled.API.Features.Player,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.TriggeringTeslaEventArgs"/> class.
            </summary>
            <param name="player"><inheritdoc cref="P:Exiled.Events.EventArgs.TriggeringTeslaEventArgs.Player"/></param>
            <param name="isInHurtingRange"><inheritdoc cref="P:Exiled.Events.EventArgs.TriggeringTeslaEventArgs.IsInHurtingRange"/></param>
            <param name="isTriggerable"><inheritdoc cref="P:Exiled.Events.EventArgs.TriggeringTeslaEventArgs.IsTriggerable"/></param>
        </member>
        <member name="P:Exiled.Events.EventArgs.TriggeringTeslaEventArgs.Player">
            <summary>
            Gets the player who triggered the tesla.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.TriggeringTeslaEventArgs.IsInHurtingRange">
            <summary>
            Gets or sets a value indicating whether the player is in hurting range or not.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.TriggeringTeslaEventArgs.IsTriggerable">
            <summary>
            Gets or sets a value indicating whether the tesla is going to be triggered or not.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.UnlockingGeneratorEventArgs">
            <summary>
            Contains all informations before the SCP-914 machine upgrades items inside it.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.UnlockingGeneratorEventArgs.#ctor(Exiled.API.Features.Player,Generator079,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.UnlockingGeneratorEventArgs"/> class.
            </summary>
            <param name="player"><inheritdoc cref="P:Exiled.Events.EventArgs.UnlockingGeneratorEventArgs.Player"/></param>
            <param name="generator"><inheritdoc cref="P:Exiled.Events.EventArgs.UnlockingGeneratorEventArgs.Generator"/></param>
            <param name="isAllowed"><inheritdoc cref="P:Exiled.Events.EventArgs.UnlockingGeneratorEventArgs.IsAllowed"/></param>
        </member>
        <member name="P:Exiled.Events.EventArgs.UnlockingGeneratorEventArgs.Player">
            <summary>
            Gets the player who's unlocking the generator.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.UnlockingGeneratorEventArgs.Generator">
            <summary>
            Gets the generator that is going to be unlocked.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.UnlockingGeneratorEventArgs.IsAllowed">
            <summary>
            Gets or sets a value indicating whether the event can be executed or not.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.UpgradingItemsEventArgs">
            <summary>
            Contains all informations before the SCP-914 machine upgrades items inside it.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.UpgradingItemsEventArgs.#ctor(Scp914.Scp914Machine,System.Collections.Generic.List{Exiled.API.Features.Player},System.Collections.Generic.List{Pickup},Scp914.Scp914Knob,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.UpgradingItemsEventArgs"/> class.
            </summary>
            <param name="scp914"><inheritdoc cref="P:Exiled.Events.EventArgs.UpgradingItemsEventArgs.Scp914"/></param>
            <param name="players"><inheritdoc cref="P:Exiled.Events.EventArgs.UpgradingItemsEventArgs.Players"/></param>
            <param name="items"><inheritdoc cref="P:Exiled.Events.EventArgs.UpgradingItemsEventArgs.Items"/></param>
            <param name="knobSetting"><inheritdoc cref="P:Exiled.Events.EventArgs.UpgradingItemsEventArgs.KnobSetting"/></param>
            <param name="isAllowed"><inheritdoc cref="P:Exiled.Events.EventArgs.UpgradingItemsEventArgs.IsAllowed"/></param>
        </member>
        <member name="P:Exiled.Events.EventArgs.UpgradingItemsEventArgs.Scp914">
            <summary>
            Gets the <see cref="T:Scp914.Scp914Machine"/> instance.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.UpgradingItemsEventArgs.Players">
            <summary>
            Gets all players inside SCP-914.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.UpgradingItemsEventArgs.Items">
            <summary>
            Gets all items to be upgraded inside SCP-914.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.UpgradingItemsEventArgs.KnobSetting">
            <summary>
            Gets or sets SCP-914 working knob setting.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.UpgradingItemsEventArgs.IsAllowed">
            <summary>
            Gets or sets a value indicating whether the event can be executed or not.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.UsedMedicalItemEventArgs">
            <summary>
            Contains all informations after a player uses a medical item on himself.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.UsedMedicalItemEventArgs.#ctor(Exiled.API.Features.Player,ItemType)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.UsedMedicalItemEventArgs"/> class.
            </summary>
            <param name="player"><inheritdoc cref="P:Exiled.Events.EventArgs.UsedMedicalItemEventArgs.Player"/></param>
            <param name="item"><inheritdoc cref="P:Exiled.Events.EventArgs.UsedMedicalItemEventArgs.Item"/></param>
        </member>
        <member name="P:Exiled.Events.EventArgs.UsedMedicalItemEventArgs.Player">
            <summary>
            Gets the player who used the medical item.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.UsedMedicalItemEventArgs.Item">
            <summary>
            Gets the medical item that the player consumed.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.UsingMedicalItemEventArgs">
            <summary>
            Contains all informations before a player uses a medical item.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.UsingMedicalItemEventArgs.#ctor(Exiled.API.Features.Player,ItemType,System.Single,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.UsingMedicalItemEventArgs"/> class.
            </summary>
            <param name="player">The player who's going to use the medical item.</param>
            <param name="item">The medical item to be used.</param>
            <param name="cooldown"><inheritdoc cref="P:Exiled.Events.EventArgs.UsingMedicalItemEventArgs.Cooldown"/></param>
            <param name="isAllowed"><inheritdoc cref="P:Exiled.Events.EventArgs.UsingMedicalItemEventArgs.IsAllowed"/></param>
        </member>
        <member name="P:Exiled.Events.EventArgs.UsingMedicalItemEventArgs.Cooldown">
            <summary>
            Gets or sets the medical item cooldown.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.UsingMedicalItemEventArgs.IsAllowed">
            <summary>
            Gets or sets a value indicating whether the event can be executed or not.
            </summary>
        </member>
        <member name="T:Exiled.Events.Events">
            <summary>
            Patch and unpatch events into the game.
            </summary>
        </member>
        <member name="F:Exiled.Events.Events.patchesCounter">
            <summary>
            The below variable is used to increment the name of the harmony instance, otherwise harmony will not work upon a plugin reload.
            </summary>
        </member>
        <member name="T:Exiled.Events.Events.CustomEventHandler`1">
            <summary>
            The custom <see cref="T:System.EventHandler"/> delegate.
            </summary>
            <typeparam name="TEventArgs">The <see cref="T:System.EventHandler`1"/> type.</typeparam>
            <param name="ev">The <see cref="T:System.EventHandler`1"/> instance.</param>
        </member>
        <member name="T:Exiled.Events.Events.CustomEventHandler">
            <summary>
            The custom <see cref="T:System.EventHandler"/> delegate, with empty parameters.
            </summary>
        </member>
        <member name="P:Exiled.Events.Events.Instance">
            <summary>
            Gets the plugin instance.
            </summary>
        </member>
        <member name="P:Exiled.Events.Events.DisabledPatches">
            <summary>
            Gets a list of types and methods for which EXILED patches should not be run.
            </summary>
        </member>
        <member name="P:Exiled.Events.Events.Priority">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.Events.Events.Harmony">
            <summary>
            Gets the <see cref="T:HarmonyLib.Harmony"/> instance.
            </summary>
        </member>
        <member name="M:Exiled.Events.Events.OnEnabled">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.Events.Events.OnDisabled">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.Events.Events.Patch">
            <summary>
            Patches all events.
            </summary>
        </member>
        <member name="M:Exiled.Events.Events.ReloadDisabledPatches">
            <summary>
            Checks the <see cref="P:Exiled.Events.Events.DisabledPatches"/> list and un-patches any methods that have been defined there. Once un-patching has been done, they can be patched by plugins, but will not be re-patchable by Exiled until a server reboot.
            </summary>
        </member>
        <member name="M:Exiled.Events.Events.Unpatch">
            <summary>
            Unpatches all events.
            </summary>
        </member>
        <member name="T:Exiled.Events.Extensions.Event">
            <summary>
            A set of tools to execute events safely and without breaking other plugins.
            </summary>
        </member>
        <member name="M:Exiled.Events.Extensions.Event.InvokeSafely``1(Exiled.Events.Events.CustomEventHandler{``0},``0)">
            <summary>
            Executes all <see cref="T:Exiled.Events.Events.CustomEventHandler`1"/> listeners safely.
            </summary>
            <typeparam name="T">Event arg type.</typeparam>
            <param name="ev">Source event.</param>
            <param name="arg">Event arg.</param>
            <exception cref="T:System.ArgumentNullException">Event or its arg is null.</exception>
        </member>
        <member name="M:Exiled.Events.Extensions.Event.InvokeSafely(Exiled.Events.Events.CustomEventHandler)">
            <summary>
            Executes all <see cref="T:Exiled.Events.Events.CustomEventHandler"/> listeners safely.
            </summary>
            <param name="ev">Source event.</param>
            <exception cref="T:System.ArgumentNullException">Event is null.</exception>
        </member>
        <member name="T:Exiled.Events.Handlers.Map">
            <summary>
            Map related events.
            </summary>
        </member>
        <member name="E:Exiled.Events.Handlers.Map.PlacingDecal">
            <summary>
            Invoked before placing decals.
            </summary>
        </member>
        <member name="E:Exiled.Events.Handlers.Map.PlacingBlood">
            <summary>
            Invoked before placing bloods.
            </summary>
        </member>
        <member name="E:Exiled.Events.Handlers.Map.AnnouncingDecontamination">
            <summary>
            Invoked before announcing the light containment zone decontamination.
            </summary>
        </member>
        <member name="E:Exiled.Events.Handlers.Map.AnnouncingScpTermination">
            <summary>
            Invoked before announcing an SCP termination.
            </summary>
        </member>
        <member name="E:Exiled.Events.Handlers.Map.AnnouncingNtfEntrance">
            <summary>
            Invoked before announcing the NTF entrance.
            </summary>
        </member>
        <member name="E:Exiled.Events.Handlers.Map.GeneratorActivated">
            <summary>
            Invoked after a generator has been activated.
            </summary>
        </member>
        <member name="E:Exiled.Events.Handlers.Map.Decontaminating">
            <summary>
            Invoked before decontaminating the light containment zone.
            </summary>
        </member>
        <member name="E:Exiled.Events.Handlers.Map.ExplodingGrenade">
            <summary>
            Invoked before a grenade explodes.
            </summary>
        </member>
        <member name="M:Exiled.Events.Handlers.Map.OnPlacingDecal(Exiled.Events.EventArgs.PlacingDecalEventArgs)">
            <summary>
            Called before placing a decal.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.PlacingDecalEventArgs"/> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Map.OnPlacingBlood(Exiled.Events.EventArgs.PlacingBloodEventArgs)">
            <summary>
            Called before placing bloods.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.PlacingDecalEventArgs"/> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Map.OnAnnouncingDecontamination(Exiled.Events.EventArgs.AnnouncingDecontaminationEventArgs)">
            <summary>
            Called before announcing the light containment zone decontamination.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.PlacingDecalEventArgs"/> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Map.OnAnnouncingScpTermination(Exiled.Events.EventArgs.AnnouncingScpTerminationEventArgs)">
            <summary>
            Called before announcing an SCP termination.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.PlacingDecalEventArgs"/> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Map.OnAnnouncingNtfEntrance(Exiled.Events.EventArgs.AnnouncingNtfEntranceEventArgs)">
            <summary>
            Called before announcing the NTF entrance.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.PlacingDecalEventArgs"/> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Map.OnGeneratorActivated(Exiled.Events.EventArgs.GeneratorActivatedEventArgs)">
            <summary>
            Called after a generator has been activated.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.GeneratorActivatedEventArgs"/> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Map.OnDecontaminating(Exiled.Events.EventArgs.DecontaminatingEventArgs)">
            <summary>
            Called before decontaminating the light containment zone.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.DecontaminatingEventArgs"/> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Map.OnExplodingGrenade(Exiled.Events.EventArgs.ExplodingGrenadeEventArgs)">
            <summary>
            Called before a grenade explodes.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.ExplodingGrenadeEventArgs"/> instance.</param>
        </member>
        <member name="T:Exiled.Events.Handlers.Player">
            <summary>
            Player related events.
            </summary>
        </member>
        <member name="E:Exiled.Events.Handlers.Player.PreAuthenticating">
            <summary>
            Invoked before authenticating a player.
            </summary>
        </member>
        <member name="E:Exiled.Events.Handlers.Player.Kicking">
            <summary>
            Invoked before kicking a player.
            </summary>
        </member>
        <member name="E:Exiled.Events.Handlers.Player.Kicked">
            <summary>
            Invoked after a player has been kicked.
            </summary>
        </member>
        <member name="E:Exiled.Events.Handlers.Player.Banning">
            <summary>
            Invoked before banning a player.
            </summary>
        </member>
        <member name="E:Exiled.Events.Handlers.Player.Banned">
            <summary>
            Invoked after a player has been banned.
            </summary>
        </member>
        <member name="E:Exiled.Events.Handlers.Player.MedicalItemUsed">
            <summary>
            Invoked after a player used a medical item.
            </summary>
        </member>
        <member name="E:Exiled.Events.Handlers.Player.StoppingMedicalItem">
            <summary>
            Invoked after a player has stopped the use of a medical item.
            </summary>
        </member>
        <member name="E:Exiled.Events.Handlers.Player.Interacted">
            <summary>
            Invoked after a player interacted with something.
            </summary>
        </member>
        <member name="E:Exiled.Events.Handlers.Player.SpawningRagdoll">
            <summary>
            Invoked before spawning a player's ragdoll.
            </summary>
        </member>
        <member name="E:Exiled.Events.Handlers.Player.ActivatingWarheadPanel">
            <summary>
            Invoked before activating the warhead panel.
            </summary>
        </member>
        <member name="E:Exiled.Events.Handlers.Player.UsingMedicalItem">
            <summary>
            Invoked before using a medical item.
            </summary>
        </member>
        <member name="E:Exiled.Events.Handlers.Player.Joined">
            <summary>
            Invoked after a player has joined the server.
            </summary>
        </member>
        <member name="E:Exiled.Events.Handlers.Player.Left">
            <summary>
            Invoked after a player has left the server.
            </summary>
        </member>
        <member name="E:Exiled.Events.Handlers.Player.Hurting">
            <summary>
            Invoked before hurting a player.
            </summary>
        </member>
        <member name="E:Exiled.Events.Handlers.Player.Dying">
            <summary>
            Invoked before a player dies.
            </summary>
        </member>
        <member name="E:Exiled.Events.Handlers.Player.Died">
            <summary>
            Invoked after a player died.
            </summary>
        </member>
        <member name="E:Exiled.Events.Handlers.Player.ChangingRole">
            <summary>
            Invoked before changing a player's role.
            </summary>
        </member>
        <member name="E:Exiled.Events.Handlers.Player.ThrowingGrenade">
            <summary>
            Invoked before throwing a grenade.
            </summary>
        </member>
        <member name="E:Exiled.Events.Handlers.Player.DroppingItem">
            <summary>
            Invoked before dropping an item.
            </summary>
        </member>
        <member name="E:Exiled.Events.Handlers.Player.ItemDropped">
            <summary>
            Invoked after an item has been dropped.
            </summary>
        </member>
        <member name="E:Exiled.Events.Handlers.Player.PickingUpItem">
            <summary>
            Invoked before picking up an item
            </summary>
        </member>
        <member name="E:Exiled.Events.Handlers.Player.Handcuffing">
            <summary>
            Invoked before handcuffing a player.
            </summary>
        </member>
        <member name="E:Exiled.Events.Handlers.Player.RemovingHandcuffs">
            <summary>
            Invoked before removing handcuffs to a player.
            </summary>
        </member>
        <member name="E:Exiled.Events.Handlers.Player.Escaping">
            <summary>
            Invoked before escaping from the facility.
            </summary>
        </member>
        <member name="E:Exiled.Events.Handlers.Player.IntercomSpeaking">
            <summary>
            Invoked before speaking to the intercom.
            </summary>
        </member>
        <member name="E:Exiled.Events.Handlers.Player.Shot">
            <summary>
            Invoked after a player's shot.
            </summary>
        </member>
        <member name="E:Exiled.Events.Handlers.Player.Shooting">
            <summary>
            Invoked before shooting.
            </summary>
        </member>
        <member name="E:Exiled.Events.Handlers.Player.EnteringPocketDimension">
            <summary>
            Invoked before entering the pocket dimension.
            </summary>
        </member>
        <member name="E:Exiled.Events.Handlers.Player.EscapingPocketDimension">
            <summary>
            Invoked before escaping the pocket dimension.
            </summary>
        </member>
        <member name="E:Exiled.Events.Handlers.Player.FailingEscapePocketDimension">
            <summary>
            Invoked before escaping the pocket dimension.
            </summary>
        </member>
        <member name="E:Exiled.Events.Handlers.Player.ReloadingWeapon">
            <summary>
            Invoked before reloading a weapon.
            </summary>
        </member>
        <member name="E:Exiled.Events.Handlers.Player.Spawning">
            <summary>
            Invoked before spawning a player.
            </summary>
        </member>
        <member name="E:Exiled.Events.Handlers.Player.EnteringFemurBreaker">
            <summary>
            Invoked before entering the femur breaker
            </summary>
        </member>
        <member name="E:Exiled.Events.Handlers.Player.SyncingData">
            <summary>
            Invoked before syncing player's data.
            </summary>
        </member>
        <member name="E:Exiled.Events.Handlers.Player.ChangingItem">
            <summary>
            Invoked before changing a player changes the item in his hand.
            </summary>
        </member>
        <member name="E:Exiled.Events.Handlers.Player.ChangingGroup">
            <summary>
            Invoked before changing a player's group.
            </summary>
        </member>
        <member name="E:Exiled.Events.Handlers.Player.InteractingDoor">
            <summary>
            Invoked before interacting with a door.
            </summary>
        </member>
        <member name="E:Exiled.Events.Handlers.Player.InteractingElevator">
            <summary>
            Invoked before interacting with an elevator.
            </summary>
        </member>
        <member name="E:Exiled.Events.Handlers.Player.InteractingLocker">
            <summary>
            Invoked before interacting with a locker.
            </summary>
        </member>
        <member name="E:Exiled.Events.Handlers.Player.TriggeringTesla">
            <summary>
            Invoked before triggering a tesla.
            </summary>
        </member>
        <member name="E:Exiled.Events.Handlers.Player.UnlockingGenerator">
            <summary>
            Invoked before unlocking a generator.
            </summary>
        </member>
        <member name="E:Exiled.Events.Handlers.Player.OpeningGenerator">
            <summary>
            Invoked before opening a generator.
            </summary>
        </member>
        <member name="E:Exiled.Events.Handlers.Player.ClosingGenerator">
            <summary>
            Invoked befroe closing a generator.
            </summary>
        </member>
        <member name="E:Exiled.Events.Handlers.Player.InsertingGeneratorTablet">
            <summary>
            Invoked before inserting a generator.
            </summary>
        </member>
        <member name="E:Exiled.Events.Handlers.Player.EjectingGeneratorTablet">
            <summary>
            Invoked before ejecting a generator.
            </summary>
        </member>
        <member name="E:Exiled.Events.Handlers.Player.ReceivingEffect">
            <summary>
            Invoked before receiving an effect.
            </summary>
        </member>
        <member name="M:Exiled.Events.Handlers.Player.OnPreAuthenticating(Exiled.Events.EventArgs.PreAuthenticatingEventArgs)">
            <summary>
            Invoked before pre-authenticating a player.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.PreAuthenticatingEventArgs"/> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Player.OnKicking(Exiled.Events.EventArgs.KickingEventArgs)">
            <summary>
            Invoked before kicking a player.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.KickingEventArgs"/> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Player.OnKicked(Exiled.Events.EventArgs.KickedEventArgs)">
            <summary>
            Invoked after a player has been kicked.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.KickedEventArgs"/> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Player.OnBanning(Exiled.Events.EventArgs.BanningEventArgs)">
            <summary>
            Invoked before banning a player.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.BanningEventArgs"/> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Player.OnBanned(Exiled.Events.EventArgs.BannedEventArgs)">
            <summary>
            Invoked after a player has been banned.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.BannedEventArgs"/> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Player.OnMedicalItemUsed(Exiled.Events.EventArgs.UsedMedicalItemEventArgs)">
            <summary>
            Invoked after a player used a medical item.
            </summary>
            <param name="ev">The <see cref="E:Exiled.Events.Handlers.Player.MedicalItemUsed"/> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Player.OnStoppingMedicalItem(Exiled.Events.EventArgs.StoppingMedicalItemEventArgs)">
            <summary>
            Invoked after a player has stopped the use of a medical item.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.StoppingMedicalItemEventArgs"/> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Player.OnInteracted(Exiled.Events.EventArgs.InteractedEventArgs)">
            <summary>
            Invoked after a player interacted with something.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.InteractedEventArgs"/> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Player.OnSpawningRagdoll(Exiled.Events.EventArgs.SpawningRagdollEventArgs)">
            <summary>
            Invoked before spawning a player's ragdoll.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.SpawningRagdollEventArgs"/> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Player.OnActivatingWarheadPanel(Exiled.Events.EventArgs.ActivatingWarheadPanelEventArgs)">
            <summary>
            Invoked before activating the warhead panel.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.ActivatingWarheadPanelEventArgs"/> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Player.OnUsingMedicalItem(Exiled.Events.EventArgs.UsingMedicalItemEventArgs)">
            <summary>
            Invoked before using a medical item.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.UsingMedicalItemEventArgs"/> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Player.OnJoined(Exiled.Events.EventArgs.JoinedEventArgs)">
            <summary>
            Invoked after a player has joined the server.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.JoinedEventArgs"/> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Player.OnLeft(Exiled.Events.EventArgs.LeftEventArgs)">
            <summary>
            Invoked after a player has left the server.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.LeftEventArgs"/> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Player.OnHurting(Exiled.Events.EventArgs.HurtingEventArgs)">
            <summary>
            Invoked before hurting a player.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.HurtingEventArgs"/> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Player.OnDying(Exiled.Events.EventArgs.DyingEventArgs)">
            <summary>
            Invoked before a player dies.
            </summary>
            <param name="ev"><see cref="T:Exiled.Events.EventArgs.DyingEventArgs"/> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Player.OnDied(Exiled.Events.EventArgs.DiedEventArgs)">
            <summary>
            Invoked after a player died.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.DiedEventArgs"/> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Player.OnChangingRole(Exiled.Events.EventArgs.ChangingRoleEventArgs)">
            <summary>
            Invoked before changing a player's role.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.ChangingRoleEventArgs"/> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Player.OnThrowingGrenade(Exiled.Events.EventArgs.ThrowingGrenadeEventArgs)">
            <summary>
            Invoked before throwing a grenade.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.ThrowingGrenadeEventArgs"/> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Player.OnDroppingItem(Exiled.Events.EventArgs.DroppingItemEventArgs)">
            <summary>
            Invoked before dropping an item.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.DroppingItemEventArgs"/> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Player.OnItemDropped(Exiled.Events.EventArgs.ItemDroppedEventArgs)">
            <summary>
            Invoked after an item has been dropped.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.ItemDroppedEventArgs"/> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Player.OnPickingUpItem(Exiled.Events.EventArgs.PickingUpItemEventArgs)">
            <summary>
            Invoked before picking up an item.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.PickingUpItemEventArgs"/> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Player.OnHandcuffing(Exiled.Events.EventArgs.HandcuffingEventArgs)">
            <summary>
            Invoked before handcuffing a player.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.HandcuffingEventArgs"/> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Player.OnRemovingHandcuffs(Exiled.Events.EventArgs.RemovingHandcuffsEventArgs)">
            <summary>
            Invoked before removing handcuffs to a player.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.RemovingHandcuffsEventArgs"/> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Player.OnEscaping(Exiled.Events.EventArgs.EscapingEventArgs)">
            <summary>
            Invoked before escaping from the facility.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.EscapingEventArgs"/> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Player.OnIntercomSpeaking(Exiled.Events.EventArgs.IntercomSpeakingEventArgs)">
            <summary>
            Invoked before speaking to the intercom.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.IntercomSpeakingEventArgs"/> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Player.OnShot(Exiled.Events.EventArgs.ShotEventArgs)">
            <summary>
            Invoked after a player's shot.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.ShotEventArgs"/> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Player.OnShooting(Exiled.Events.EventArgs.ShootingEventArgs)">
            <summary>
            Invoked before shooting.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.ShootingEventArgs"/> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Player.OnEnteringPocketDimension(Exiled.Events.EventArgs.EnteringPocketDimensionEventArgs)">
            <summary>
            Invoked before entering the pocket dimension.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.EnteringPocketDimensionEventArgs"/> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Player.OnEscapingPocketDimension(Exiled.Events.EventArgs.EscapingPocketDimensionEventArgs)">
            <summary>
            Invoked before escaping the pocket dimension.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.EscapingPocketDimensionEventArgs"/> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Player.OnFailingEscapePocketDimension(Exiled.Events.EventArgs.FailingEscapePocketDimensionEventArgs)">
            <summary>
            Invoked before choosing the incorrect pocket dimension exit.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.FailingEscapePocketDimensionEventArgs"/> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Player.OnReloadingWeapon(Exiled.Events.EventArgs.ReloadingWeaponEventArgs)">
            <summary>
            Invoked before reloading a weapon.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.ReloadingWeaponEventArgs"/> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Player.OnSpawning(Exiled.Events.EventArgs.SpawningEventArgs)">
            <summary>
            Invoked before spawning a player.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.SpawningEventArgs"/> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Player.OnEnteringFemurBreaker(Exiled.Events.EventArgs.EnteringFemurBreakerEventArgs)">
            <summary>
            Invoked before entering the femur breaker.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.EnteringFemurBreakerEventArgs"/> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Player.OnSyncingData(Exiled.Events.EventArgs.SyncingDataEventArgs)">
            <summary>
            Invoked before syncing player's data.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.SyncingDataEventArgs"/> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Player.OnChangingItem(Exiled.Events.EventArgs.ChangingItemEventArgs)">
            <summary>
            Invoked before changing a player changes the item in his hand.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.ChangingItemEventArgs"/> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Player.OnChangingGroup(Exiled.Events.EventArgs.ChangingGroupEventArgs)">
            <summary>
            Called before changing a player's group.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.ChangingGroupEventArgs"/> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Player.OnInteractingDoor(Exiled.Events.EventArgs.InteractingDoorEventArgs)">
            <summary>
            Called before interacting with a door.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.PlacingDecalEventArgs"/> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Player.OnInteractingElevator(Exiled.Events.EventArgs.InteractingElevatorEventArgs)">
            <summary>
            Called before interacting with an elevator.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.PlacingDecalEventArgs"/> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Player.OnInteractingLocker(Exiled.Events.EventArgs.InteractingLockerEventArgs)">
            <summary>
            Called before interacting with a locker.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.PlacingDecalEventArgs"/> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Player.OnTriggeringTesla(Exiled.Events.EventArgs.TriggeringTeslaEventArgs)">
            <summary>
            Called before triggering a tesla.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.TriggeringTeslaEventArgs"/> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Player.OnUnlockingGenerator(Exiled.Events.EventArgs.UnlockingGeneratorEventArgs)">
            <summary>
            Called before unlocking a generator.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.UnlockingGeneratorEventArgs"/> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Player.OnOpeningGenerator(Exiled.Events.EventArgs.OpeningGeneratorEventArgs)">
            <summary>
            Called before opening a generator.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.OpeningGeneratorEventArgs"/> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Player.OnClosingGenerator(Exiled.Events.EventArgs.ClosingGeneratorEventArgs)">
            <summary>
            Called before closing a generator.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.ClosingGeneratorEventArgs"/> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Player.OnInsertingGeneratorTablet(Exiled.Events.EventArgs.InsertingGeneratorTabletEventArgs)">
            <summary>
            Called before inserting a generator.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.InsertingGeneratorTabletEventArgs"/> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Player.OnEjectingGeneratorTablet(Exiled.Events.EventArgs.EjectingGeneratorTabletEventArgs)">
            <summary>
            Called before ejecting a generator.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.EjectingGeneratorTabletEventArgs"/> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Player.OnReceivingEffect(Exiled.Events.EventArgs.ReceivingEffectEventArgs)">
            <summary>
            Called before receiving an effect.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.ReceivingEffectEventArgs"/> instance.</param>
        </member>
        <member name="T:Exiled.Events.Handlers.Round">
            <summary>
            Handles some round clean-up events and some others related to players.
            </summary>
        </member>
        <member name="M:Exiled.Events.Handlers.Round.OnWaitingForPlayers">
            <inheritdoc cref="M:Exiled.Events.Handlers.Server.OnWaitingForPlayers"/>
        </member>
        <member name="M:Exiled.Events.Handlers.Round.OnRestartingRound">
            <inheritdoc cref="M:Exiled.Events.Handlers.Server.OnRestartingRound"/>
        </member>
        <member name="M:Exiled.Events.Handlers.Round.OnRoundStarted">
            <inheritdoc cref="M:Exiled.Events.Handlers.Server.OnRoundStarted"/>
        </member>
        <member name="M:Exiled.Events.Handlers.Round.OnChangingRole(Exiled.Events.EventArgs.ChangingRoleEventArgs)">
            <inheritdoc cref="M:Exiled.Events.Handlers.Player.OnChangingRole(Exiled.Events.EventArgs.ChangingRoleEventArgs)"/>
        </member>
        <member name="T:Exiled.Events.Handlers.Scp049">
            <summary>
            Scp049 related events.
            </summary>
        </member>
        <member name="E:Exiled.Events.Handlers.Scp049.FinishingRecall">
            <summary>
            Invoked before a player is infected.
            </summary>
        </member>
        <member name="E:Exiled.Events.Handlers.Scp049.StartingRecall">
            <summary>
            Invoked before Scp049 starts to infect a player.
            </summary>
        </member>
        <member name="M:Exiled.Events.Handlers.Scp049.OnFinishingRecall(Exiled.Events.EventArgs.FinishingRecallEventArgs)">
            <summary>
            Invoked before a player is recalled.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.FinishingRecallEventArgs"/> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Scp049.OnStartingRecall(Exiled.Events.EventArgs.StartingRecallEventArgs)">
            <summary>
            Invoked before Scp049 starts to recall a player.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.StartingRecallEventArgs"/> instance.</param>
        </member>
        <member name="T:Exiled.Events.Handlers.Scp079">
            <summary>
            SCP-079 related events.
            </summary>
        </member>
        <member name="E:Exiled.Events.Handlers.Scp079.GainingExperience">
            <summary>
            Invoked before gaining experience with SCP-079
            </summary>
        </member>
        <member name="E:Exiled.Events.Handlers.Scp079.GainingLevel">
            <summary>
            Invoked before gaining levels with SCP-079
            </summary>
        </member>
        <member name="E:Exiled.Events.Handlers.Scp079.InteractingTesla">
            <summary>
            Invoked before triggering a tesla with SCP-079.
            </summary>
        </member>
        <member name="E:Exiled.Events.Handlers.Scp079.InteractingDoor">
            <summary>
            Invoked before triggering a door with SCP-079.
            </summary>
        </member>
        <member name="E:Exiled.Events.Handlers.Scp079.StartingSpeaker">
            <summary>
            Invoked before triggering a speaker with SCP-079.
            </summary>
        </member>
        <member name="E:Exiled.Events.Handlers.Scp079.StoppingSpeaker">
            <summary>
            Invoked before stopping a speaker with SCP-079.
            </summary>
        </member>
        <member name="E:Exiled.Events.Handlers.Scp079.Recontained">
            <summary>
            Invoked after Scp079 recontainment.
            </summary>
        </member>
        <member name="M:Exiled.Events.Handlers.Scp079.OnGainingExperience(Exiled.Events.EventArgs.GainingExperienceEventArgs)">
            <summary>
            Invoked before gaining experience with SCP-079.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.GainingExperienceEventArgs"/> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Scp079.OnGainingLevel(Exiled.Events.EventArgs.GainingLevelEventArgs)">
            <summary>
            Invoked before gaining levels with SCP-079.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.GainingLevelEventArgs"/> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Scp079.OnInteractingTesla(Exiled.Events.EventArgs.InteractingTeslaEventArgs)">
            <summary>
            Invoked before triggering a tesla with SCP-079.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.InteractingTeslaEventArgs"/> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Scp079.OnInteractingDoor(Exiled.Events.EventArgs.InteractingDoorEventArgs)">
            <summary>
            Invoked before interacting with a door with SCP-079.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.InteractingDoorEventArgs"/> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Scp079.OnStartingSpeaker(Exiled.Events.EventArgs.StartingSpeakerEventArgs)">
            <summary>
            Invoked before interacting with a speaker with SCP-079.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.StartingSpeakerEventArgs"/> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Scp079.OnStoppingSpeaker(Exiled.Events.EventArgs.StoppingSpeakerEventArgs)">
            <summary>
            Invoked before stopping with a speaker with SCP-079.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.StoppingEventArgs"/> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Scp079.OnRecontained(Exiled.Events.EventArgs.RecontainedEventArgs)">
            <summary>
            Called after 079 recontainment.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.RecontainedEventArgs"/> instance.</param>
        </member>
        <member name="T:Exiled.Events.Handlers.Scp096">
            <summary>
            SCP-096 related events.
            </summary>
        </member>
        <member name="E:Exiled.Events.Handlers.Scp096.Enraging">
            <summary>
            Invoked before enraging with SCP-096.
            </summary>
        </member>
        <member name="E:Exiled.Events.Handlers.Scp096.CalmingDown">
            <summary>
            Invoked before calming down with SCP-096.
            </summary>
        </member>
        <member name="E:Exiled.Events.Handlers.Scp096.AddingTarget">
            <summary>
            Invoked before adding a target to SCP-096.
            </summary>
        </member>
        <member name="E:Exiled.Events.Handlers.Scp096.StartPryingGate">
            <summary>
            Invoked before Scp096 starts prying open a gate.
            </summary>
        </member>
        <member name="M:Exiled.Events.Handlers.Scp096.OnEnraging(Exiled.Events.EventArgs.EnragingEventArgs)">
            <summary>
            Invoked before enraging with SCP-096.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.EnragingEventArgs"/> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Scp096.OnCalmingDown(Exiled.Events.EventArgs.CalmingDownEventArgs)">
            <summary>
            Invoked before calming down with SCP-096.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.CalmingDownEventArgs"/> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Scp096.OnAddingTarget(Exiled.Events.EventArgs.AddingTargetEventArgs)">
            <summary>
            Invoked before adding a target to SCP-096.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.AddingTargetEventArgs"/> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Scp096.OnStartPryingGate(Exiled.Events.EventArgs.StartPryingGateEventArgs)">
            <summary>
            Invoked before Scp096 starts prying open a gate.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.StartPryingGateEventArgs"/> instance.</param>
        </member>
        <member name="T:Exiled.Events.Handlers.Scp106">
            <summary>
            SCP-106 related events.
            </summary>
        </member>
        <member name="E:Exiled.Events.Handlers.Scp106.CreatingPortal">
            <summary>
            Invoked before creating an SCP-106 portal.
            </summary>
        </member>
        <member name="E:Exiled.Events.Handlers.Scp106.Teleporting">
            <summary>
            Invoked before teleporting with SCP-106.
            </summary>
        </member>
        <member name="E:Exiled.Events.Handlers.Scp106.Containing">
            <summary>
            Invoked before containing SCP-106.
            </summary>
        </member>
        <member name="M:Exiled.Events.Handlers.Scp106.OnCreatingPortal(Exiled.Events.EventArgs.CreatingPortalEventArgs)">
            <summary>
            Invoked before creating an SCP-106 portal.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.CreatingPortalEventArgs"/> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Scp106.OnTeleporting(Exiled.Events.EventArgs.TeleportingEventArgs)">
            <summary>
            Invoked before teleporting with SCP-106.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.TeleportingEventArgs"/> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Scp106.OnContaining(Exiled.Events.EventArgs.ContainingEventArgs)">
            <summary>
            Invoked before containing SCP-106.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.ContainingEventArgs"/> instance.</param>
        </member>
        <member name="T:Exiled.Events.Handlers.Scp914">
            <summary>
            Handles SCP-914 related events.
            </summary>
        </member>
        <member name="E:Exiled.Events.Handlers.Scp914.UpgradingItems">
            <summary>
            Invoked before upgrading items in the SCP-914 machine.
            </summary>
        </member>
        <member name="E:Exiled.Events.Handlers.Scp914.Activating">
            <summary>
            Invoked before activating the SCP-914 machine.
            </summary>
        </member>
        <member name="E:Exiled.Events.Handlers.Scp914.ChangingKnobSetting">
            <summary>
            Invoked before changing the SCP-914 machine knob setting.
            </summary>
        </member>
        <member name="M:Exiled.Events.Handlers.Scp914.OnUpgradingItems(Exiled.Events.EventArgs.UpgradingItemsEventArgs)">
            <summary>
            Called before upgrading items in the SCP-914 machine.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.UpgradingItemsEventArgs"/> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Scp914.OnActivating(Exiled.Events.EventArgs.ActivatingEventArgs)">
            <summary>
            Invoked before activating the SCP-914 machine.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.ActivatingEventArgs"/> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Scp914.OnChangingKnobSetting(Exiled.Events.EventArgs.ChangingKnobSettingEventArgs)">
            <summary>
            Invoked before changing the SCP-914 machine knob setting.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.ChangingKnobSettingEventArgs"/> instance.</param>
        </member>
        <member name="T:Exiled.Events.Handlers.Server">
            <summary>
            Server related events.
            </summary>
        </member>
        <member name="E:Exiled.Events.Handlers.Server.WaitingForPlayers">
            <summary>
            Invoked before waiting for players.
            </summary>
        </member>
        <member name="E:Exiled.Events.Handlers.Server.RoundStarted">
            <summary>
            Invoked after the start of a new round.
            </summary>
        </member>
        <member name="E:Exiled.Events.Handlers.Server.EndingRound">
            <summary>
            Invoked before ending a round
            </summary>
        </member>
        <member name="E:Exiled.Events.Handlers.Server.RoundEnded">
            <summary>
            Invoked after the end of a round.
            </summary>
        </member>
        <member name="E:Exiled.Events.Handlers.Server.RestartingRound">
            <summary>
            Invoked before the restart of a round.
            </summary>
        </member>
        <member name="E:Exiled.Events.Handlers.Server.ReportingCheater">
            <summary>
            Invoked when a player reports a cheater.
            </summary>
        </member>
        <member name="E:Exiled.Events.Handlers.Server.RespawningTeam">
            <summary>
            Invoked before respawning a wave of Chaos Insurgency or NTF.
            </summary>
        </member>
        <member name="E:Exiled.Events.Handlers.Server.SendingConsoleCommand">
            <summary>
            Invoked when sending a command through the in-game console.
            </summary>
        </member>
        <member name="E:Exiled.Events.Handlers.Server.SendingRemoteAdminCommand">
            <summary>
            Invoked when sending a command through the Remote Admin console.
            </summary>
        </member>
        <member name="E:Exiled.Events.Handlers.Server.LocalReporting">
            <summary>
            Invoked when sending a complaint about a player to the local server administrators.
            </summary>
        </member>
        <member name="E:Exiled.Events.Handlers.Server.ReloadedConfigs">
            <summary>
            Invoked after the "reload configs" command is ran.
            </summary>
        </member>
        <member name="E:Exiled.Events.Handlers.Server.ReloadedGameplay">
            <summary>
            Invoked after the "reload gameplay" command is ran.
            </summary>
        </member>
        <member name="E:Exiled.Events.Handlers.Server.ReloadedRA">
            <summary>
            Invoked after the "reload remoteadminconfigs" command is ran.
            </summary>
        </member>
        <member name="M:Exiled.Events.Handlers.Server.OnWaitingForPlayers">
            <summary>
            Called before waiting for players.
            </summary>
        </member>
        <member name="M:Exiled.Events.Handlers.Server.OnRoundStarted">
            <summary>
            Called after the start of a new round.
            </summary>
        </member>
        <member name="M:Exiled.Events.Handlers.Server.OnEndingRound(Exiled.Events.EventArgs.EndingRoundEventArgs)">
            <summary>
            Called before ending a round.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.EndingRoundEventArgs"/> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Server.OnRoundEnded(Exiled.Events.EventArgs.RoundEndedEventArgs)">
            <summary>
            Called after the end of a round.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.RoundEndedEventArgs"/> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Server.OnRestartingRound">
            <summary>
            Called before restarting a round.
            </summary>
        </member>
        <member name="M:Exiled.Events.Handlers.Server.OnReportingCheater(Exiled.Events.EventArgs.ReportingCheaterEventArgs)">
            <summary>
            Called when a player reports a cheater.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.ReportingCheaterEventArgs"/> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Server.OnRespawningTeam(Exiled.Events.EventArgs.RespawningTeamEventArgs)">
            <summary>
            Called before respawning a wave of Chaso Insurgency or NTF.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.RespawningTeamEventArgs"/> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Server.OnSendingConsoleCommand(Exiled.Events.EventArgs.SendingConsoleCommandEventArgs)">
            <summary>
            Called when sending a command through in-game console.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.SendingConsoleCommandEventArgs"/> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Server.OnSendingRemoteAdminCommand(Exiled.Events.EventArgs.SendingRemoteAdminCommandEventArgs)">
            <summary>
            Called when sending a command through the Remote Admin console.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.SendingRemoteAdminCommandEventArgs"/> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Server.OnLocalReporting(Exiled.Events.EventArgs.LocalReportingEventArgs)">
            <summary>
            Called when sending a complaint about a player to the local server administrators.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.LocalReportingEventArgs"/> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Server.OnReloadedConfigs">
            <summary>
            Called after the "reload configs" command is ran.
            </summary>
        </member>
        <member name="M:Exiled.Events.Handlers.Server.OnReloadedGameplay">
            <summary>
            Called after the "reload gameplay" command is ran.
            </summary>
        </member>
        <member name="M:Exiled.Events.Handlers.Server.OnReloadedRA">
            <summary>
            Called after the "reload remoteadminconfigs" command is ran.
            </summary>
        </member>
        <member name="T:Exiled.Events.Handlers.Warhead">
            <summary>
            Handles warhead related events.
            </summary>
        </member>
        <member name="E:Exiled.Events.Handlers.Warhead.Stopping">
            <summary>
            Invoked before stopping the warhead.
            </summary>
        </member>
        <member name="E:Exiled.Events.Handlers.Warhead.Starting">
            <summary>
            Invoked before starting the warhead.
            </summary>
        </member>
        <member name="E:Exiled.Events.Handlers.Warhead.Detonated">
            <summary>
            Invoked after the warhead has been detonated.
            </summary>
        </member>
        <member name="M:Exiled.Events.Handlers.Warhead.OnStopping(Exiled.Events.EventArgs.StoppingEventArgs)">
            <summary>
            Called before stopping the warhead.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.StoppingEventArgs"/> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Warhead.OnStarting(Exiled.Events.EventArgs.StartingEventArgs)">
            <summary>
            Called before starting the warhead.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.StartingEventArgs"/> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Warhead.OnDetonated">
            <summary>
            Called after the warhead has been detonated.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Map.AnnouncingDecontamination">
            <summary>
            Patches <see cref="M:LightContainmentZoneDecontamination.DecontaminationController.UpdateSpeaker(System.Boolean)"/>.
            Adds the <see cref="E:Exiled.Events.Handlers.Map.AnnouncingDecontamination"/> event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Map.AnnouncingNtfEntrance">
            <summary>
            Patch the <see cref="M:Respawning.NamingRules.NineTailedFoxNamingRule.PlayEntranceAnnouncement(System.String)"/>.
            Adds the <see cref="E:Exiled.Events.Handlers.Map.AnnouncingNtfEntrance"/> event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Map.AnnouncingScpTermination">
            <summary>
            Patches <see cref="M:NineTailedFoxAnnouncer.AnnounceScpTermination(Role,PlayerStats.HitInfo,System.String)"/>.
            Adds the <see cref="E:Exiled.Events.Handlers.Map.AnnouncingScpTermination"/> event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Map.Decontaminating">
            <summary>
            Patches <see cref="M:LightContainmentZoneDecontamination.DecontaminationController.FinishDecontamination"/>.
            Adds the <see cref="E:Exiled.Events.Handlers.Map.Decontaminating"/> event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Map.ExplodingFlashGrenade">
            <summary>
            Patches <see cref="M:Grenades.FlashGrenade.ServersideExplosion"/>.
            Adds the <see cref="M:Exiled.Events.Handlers.Map.OnExplodingGrenade(Exiled.Events.EventArgs.ExplodingGrenadeEventArgs)"/> event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Map.ExplodingFragGrenade">
            <summary>
            Patches <see cref="M:Grenades.FragGrenade.ServersideExplosion"/>.
            Adds the <see cref="M:Exiled.Events.Handlers.Map.OnExplodingGrenade(Exiled.Events.EventArgs.ExplodingGrenadeEventArgs)"/> event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Map.GeneratorActivated">
            <summary>
            Patches <see cref="M:Generator079.CheckFinish"/>.
            Adds the <see cref="E:Exiled.Events.Handlers.Map.GeneratorActivated"/> event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Map.PlacingBlood">
            <summary>
            Patches <see cref="M:CharacterClassManager.RpcPlaceBlood(UnityEngine.Vector3,System.Int32,System.Single)"/>.
            Adds the <see cref="E:Exiled.Events.Handlers.Map.PlacingBlood"/> event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Map.PlacingBloodAndDecal">
            <summary>
            Patches <see cref="M:WeaponManager.RpcPlaceDecal(System.Boolean,System.SByte,UnityEngine.Vector3,UnityEngine.Quaternion)"/>.
            Adds the <see cref="E:Exiled.Events.Handlers.Map.PlacingDecal"/> event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Player.ActivatingWarheadPanel">
            <summary>
            Patch the <see cref="M:PlayerInteract.CallCmdSwitchAWButton"/>.
            Adds the <see cref="E:Exiled.Events.Handlers.Player.ActivatingWarheadPanel"/> event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Player.Banned">
            <summary>
            Patches <see cref="M:BanHandler.IssueBan(BanDetails,BanHandler.BanType)"/>.
            Adds the <see cref="E:Exiled.Events.Handlers.Player.Banned"/> event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Player.BanningAndKicking">
            <summary>
            Patches <see cref="M:BanPlayer.BanUser(UnityEngine.GameObject,System.Int32,System.String,System.String,System.Boolean)"/>.
            Adds the <see cref="E:Exiled.Events.Handlers.Player.Banning"/> and <see cref="E:Exiled.Events.Handlers.Player.Kicking"/>events.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Player.ChangingGroup">
            <summary>
            Patches <see cref="M:ServerRoles.SetGroup(UserGroup,System.Boolean,System.Boolean,System.Boolean)"/>.
            Adds the <see cref="E:Exiled.Events.Handlers.Player.ChangingGroup"/> event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Player.ChangingItem">
            <summary>
            Patches <see cref="M:Inventory.CallCmdSetUnic(System.Int32)"/>.
            Adds the <see cref="E:Exiled.Events.Handlers.Player.ChangingItem"/> event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Player.ChangingRole">
            <summary>
            Patches <see cref="M:CharacterClassManager.SetPlayersClass(RoleType,UnityEngine.GameObject,System.Boolean,System.Boolean)"/>.
            Adds the <see cref="E:Exiled.Events.Handlers.Player.ChangingRole"/> and <see cref="E:Exiled.Events.Handlers.Player.Escaping"/> events.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Player.Died">
            <summary>
            Patches <see cref="M:PlayerStats.HurtPlayer(PlayerStats.HitInfo,UnityEngine.GameObject,System.Boolean)"/>.
            Adds the <see cref="E:Exiled.Events.Handlers.Player.Died"/> event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Player.EnteringFemurBreaker">
            <summary>
            Patches <see cref="M:CharacterClassManager.AllowContain"/>.
            Adds the <see cref="E:Exiled.Events.Handlers.Player.EnteringFemurBreaker"/> event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Player.EnteringPocketDimension">
            <summary>
            Patches <see cref="M:Scp106PlayerScript.CallCmdMovePlayer(UnityEngine.GameObject,System.Int32)"/>.
            Adds the <see cref="E:Exiled.Events.Handlers.Player.EnteringPocketDimension"/> event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Player.EscapingAndFailingEscapePocketDimension">
            <summary>
            Patches <see cref="M:PocketDimensionTeleport.OnTriggerEnter(UnityEngine.Collider)"/>.
            Adds the <see cref="E:Exiled.Events.Handlers.Player.EscapingPocketDimension"/> and <see cref="E:Exiled.Events.Handlers.Player.FailingEscapePocketDimension"/> event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Player.Handcuffing">
            <summary>
            Patches <see cref="M:Handcuffs.CallCmdCuffTarget(UnityEngine.GameObject)"/>.
            Adds the <see cref="E:Exiled.Events.Handlers.Player.Handcuffing"/> event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Player.Hurting">
            <summary>
            Patches <see cref="M:PlayerStats.HurtPlayer(PlayerStats.HitInfo,UnityEngine.GameObject,System.Boolean)"/>.
            Adds the <see cref="E:Exiled.Events.Handlers.Player.Hurting"/> event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Player.InsertingGeneratorTablet">
            <summary>
            Patches <see cref="M:Generator079.Interact(UnityEngine.GameObject,PlayerInteract.Generator079Operations)"/>.
            Adds the <see cref="E:Exiled.Events.Handlers.Player.InsertingGeneratorTablet"/> event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Player.Interacted">
            <summary>
            Patches <see cref="M:PlayerInteract.OnInteract"/>.
            Adds the <see cref="E:Exiled.Events.Handlers.Player.Interacted"/> event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Player.InteractingDoor">
            <summary>
            Patches <see cref="M:PlayerInteract.CallCmdOpenDoor(UnityEngine.GameObject)"/>.
            Adds the <see cref="E:Exiled.Events.Handlers.Player.InteractingDoor"/> event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Player.InteractingElevator">
            <summary>
            Patches <see cref="M:PlayerInteract.CallCmdUseElevator(UnityEngine.GameObject)"/>.
            Adds the <see cref="E:Exiled.Events.Handlers.Player.InteractingElevator"/> event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Player.InteractingLocker">
            <summary>
            Patches <see cref="M:PlayerInteract.CallCmdUseLocker(System.Byte,System.Byte)"/>.
            Adds the <see cref="E:Exiled.Events.Handlers.Player.InteractingLocker"/> event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Player.IntercomSpeaking">
            <summary>
            Patches <see cref="M:Intercom.CallCmdSetTransmit(System.Boolean)"/>.
            Adds the <see cref="E:Exiled.Events.Handlers.Player.IntercomSpeaking"/> event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Player.ItemDrop">
            <summary>
            Patches <see cref="M:Inventory.CallCmdDropItem(System.Int32)"/>.
            Adds the <see cref="E:Exiled.Events.Handlers.Player.ItemDropped"/> and <see cref="E:Exiled.Events.Handlers.Player.DroppingItem"/> events.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Player.Joined">
            <summary>
            Patches <see cref="M:PlayerManager.AddPlayer(UnityEngine.GameObject)"/>.
            Adds the <see cref="E:Exiled.Events.Handlers.Player.Joined"/> event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Player.Kicked">
            <summary>
            Patches <see cref="M:ServerConsole.Disconnect(UnityEngine.GameObject,System.String)"/>.
            Adds the <see cref="E:Exiled.Events.Handlers.Player.Kicked"/> event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Player.Left">
            <summary>
            Patches <see cref="M:CustomNetworkManager.OnServerDisconnect(Mirror.NetworkConnection)"/>.
            Adds the <see cref="E:Exiled.Events.Handlers.Player.Left"/> event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Player.PickingUpItem">
            <summary>
            Patches <see cref="M:Searching.ItemSearchCompletor.Complete"/>.
            Adds the <see cref="E:Exiled.Events.Handlers.Player.PickingUpItem"/> event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Player.PreAuthenticating">
            <summary>
            Patches <see cref="M:CustomLiteNetLib4MirrorTransport.ProcessConnectionRequest(LiteNetLib.ConnectionRequest)"/>.
            Adds the <see cref="E:Exiled.Events.Handlers.Player.PreAuthenticating"/> event.
            </summary>
        </member>
        <member name="M:Exiled.Events.Patches.Events.Player.PreAuthenticating.HandleConnection(LiteNetLib.ConnectionRequest)">
            <summary>
            Handle the player connection.
            </summary>
            <param name="request">The <see cref="T:LiteNetLib.ConnectionRequest"/> instance.</param>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Player.ReceivingStatusEffect">
            <summary>
            Patches the <see cref="M:CustomPlayerEffects.PlayerEffect.ServerChangeIntensity(System.Byte)"/> method.
            Adds the <see cref="E:Exiled.Events.Handlers.Player.ReceivingEffect"/> event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Player.ReloadingWeapon">
            <summary>
            Patches <see cref="M:WeaponManager.CallCmdReload(System.Boolean)"/>.
            Adds the <see cref="E:Exiled.Events.Handlers.Player.ReloadingWeapon"/> event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Player.RemovingHandcuffs">
            <summary>
            Patches <see cref="M:Handcuffs.ClearTarget"/>.
            Adds the <see cref="E:Exiled.Events.Handlers.Player.RemovingHandcuffs"/> event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Player.RemovingHandcuffsByTeammate">
            <summary>
            Patches <see cref="M:Handcuffs.CallCmdFreeTeammate(UnityEngine.GameObject)"/>.
            Adds the <see cref="E:Exiled.Events.Handlers.Player.RemovingHandcuffs"/> event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Player.Shoot">
            <summary>
            Patches <see cref="M:WeaponManager.CallCmdShoot(UnityEngine.GameObject,System.String,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3)"/>.
            Adds the <see cref="E:Exiled.Events.Handlers.Player.Shooting"/> and <see cref="E:Exiled.Events.Handlers.Player.Shot"/> events.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Player.Spawning">
            <summary>
            Patches <see cref="M:CharacterClassManager.ApplyProperties(System.Boolean,System.Boolean)"/>.
            Adds the <see cref="E:Exiled.Events.Handlers.Player.Spawning"/> event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Player.SpawningRagdoll">
            <summary>
            Patches <see cref="M:RagdollManager.SpawnRagdoll(UnityEngine.Vector3,UnityEngine.Quaternion,UnityEngine.Vector3,System.Int32,PlayerStats.HitInfo,System.Boolean,System.String,System.String,System.Int32)"/>.
            Adds the <see cref="E:Exiled.Events.Handlers.Player.SpawningRagdoll"/> event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Player.StoppingMedicalItem">
            <summary>
            Patches <see cref="M:ConsumableAndWearableItems.CallCmdCancelMedicalItem"/>.
            Adds the <see cref="E:Exiled.Events.Handlers.Player.StoppingMedicalItem"/> event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Player.SyncingData">
            <summary>
            Patches <see cref="M:AnimationController.CallCmdSyncData(System.Byte,UnityEngine.Vector2)"/>.
            Adds the <see cref="E:Exiled.Events.Handlers.Player.SyncingData"/> event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Player.ThrowingGrenade">
            <summary>
            Patches <see cref="M:Grenades.GrenadeManager.CallCmdThrowGrenade(System.Int32,System.Boolean,System.Double)"/>.
            Adds the <see cref="E:Exiled.Events.Handlers.Player.ThrowingGrenade"/> event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Player.TriggeringTesla">
            <summary>
            Patches <see cref="M:TeslaGateController.FixedUpdate"/>.
            Adds the <see cref="E:Exiled.Events.Handlers.Player.TriggeringTesla"/> event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Player.UnlockingGenerator">
            <summary>
            Patches <see cref="M:Generator079.OpenClose(UnityEngine.GameObject)"/>.
            Adds the <see cref="E:Exiled.Events.Handlers.Player.UnlockingGenerator"/> event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Player.UsedMedicalItem">
            <summary>
            Patches <see cref="M:ConsumableAndWearableItems.SendRpc(ConsumableAndWearableItems.HealAnimation,System.Int32)"/>.
            Adds the <see cref="E:Exiled.Events.Handlers.Player.MedicalItemUsed"/> event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Player.UsingMedicalItem">
            <summary>
            Patches <see cref="M:ConsumableAndWearableItems.CallCmdUseMedicalItem"/>.
            Adds the <see cref="E:Exiled.Events.Handlers.Player.UsingMedicalItem"/> event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Scp049.StartingAndFinishingRecall">
            <summary>
            Patches <see cref="M:PlayableScps.Scp049.BodyCmd_ByteAndGameObject(System.Byte,UnityEngine.GameObject)"/>.
            Adds the <see cref="E:Exiled.Events.Handlers.Scp049.StartingRecall"/> and <see cref="E:Exiled.Events.Handlers.Scp049.FinishingRecall"/> event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Scp079.GainingExperience">
            <summary>
            Patches <see cref="M:Scp079PlayerScript.CallRpcGainExp(ExpGainType,RoleType)"/>.
            Adds the <see cref="E:Exiled.Events.Handlers.Scp079.GainingExperience"/> event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Scp079.GainingLevel">
            <summary>
            Patches <see cref="M:Scp079PlayerScript.TargetLevelChanged(Mirror.NetworkConnection,System.Int32)"/>.
            Adds the <see cref="E:Exiled.Events.Handlers.Scp079.GainingLevel"/> event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Scp079.Interacting">
            <summary>
            Patches <see cref="M:Scp079PlayerScript.CallCmdInteract(System.String,UnityEngine.GameObject)"/>.
            Adds the <see cref="T:Exiled.Events.EventArgs.InteractingTeslaEventArgs"/>, <see cref="T:Exiled.Events.EventArgs.InteractingDoorEventArgs"/>, <see cref="E:Exiled.Events.Handlers.Scp079.StartingSpeaker"/> and <see cref="E:Exiled.Events.Handlers.Scp079.StoppingSpeaker"/> event for SCP-079.
            </summary>
        </member>
        <member name="M:Exiled.Events.Patches.Events.Scp079.Interacting.Prefix(Scp079PlayerScript,System.String,UnityEngine.GameObject)">
            <summary>
            Prefix of <see cref="M:Scp079PlayerScript.CallCmdInteract(System.String,UnityEngine.GameObject)"/>.
            </summary>
            <param name="__instance">The <see cref="T:Scp079PlayerScript"/> instance.</param>
            <param name="command">The command to be executed.</param>
            <param name="target">The target game object.</param>
            <returns>Returns a value indicating whether the original method has to be executed or not.</returns>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Scp096.AddingTarget">
            <summary>
            Patches <see cref="M:PlayableScps.Scp096.AddTarget(UnityEngine.GameObject)"/>.
            Adds the <see cref="E:Exiled.Events.Handlers.Scp096.AddingTarget"/> event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Scp096.CalmingDown">
            <summary>
            Patches <see cref="M:PlayableScps.Scp096.EndEnrage"/>.
            Adds the <see cref="E:Exiled.Events.Handlers.Scp096.CalmingDown"/> event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Scp096.Enraging">
            <summary>
            Patches <see cref="M:PlayableScps.Scp096.Enrage"/>.
            Adds the <see cref="E:Exiled.Events.Handlers.Scp096.Enraging"/> event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Scp096.StartPryingGate">
            <summary>
            Patches the <see cref="M:PlayableScps.Scp096.PryGate(Door)"/> method.
            Adds the <see cref="E:Exiled.Events.Handlers.Scp096.StartPryingGate"/> event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Scp106.Containing">
            <summary>
            Patches <see cref="M:PlayerInteract.CallCmdContain106"/>.
            Adds the <see cref="E:Exiled.Events.Handlers.Scp106.Containing"/> event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Scp106.CreatingPortal">
            <summary>
            Patches <see cref="M:Scp106PlayerScript.CallCmdMakePortal"/>.
            Adds the <see cref="E:Exiled.Events.Handlers.Scp106.CreatingPortal"/> event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Scp106.Teleporting">
            <summary>
            Patches <see cref="M:Scp106PlayerScript.CallCmdUsePortal"/>.
            Adds the <see cref="T:Exiled.Events.Patches.Events.Scp106.Teleporting"/> event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Scp914.Activating">
            <summary>
            Patches <see cref="M:PlayerInteract.CallCmdUse914"/>.
            Adds the <see cref="E:Exiled.Events.Handlers.Scp914.Activating"/> event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Scp914.ChangingKnobSetting">
            <summary>
            Patches <see cref="M:PlayerInteract.CallCmdChange914Knob"/>.
            Adds the <see cref="E:Exiled.Events.Handlers.Scp914.ChangingKnobSetting"/> event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Scp914.UpgradingItems">
            <summary>
            Patches <see cref="M:Scp914.Scp914Machine.ProcessItems"/>.
            Adds the <see cref="E:Exiled.Events.Handlers.Scp914.UpgradingItems"/> event.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Exiled.Events.Patches.Events.Server.LocalReporting" -->
        <member name="T:Exiled.Events.Patches.Events.Server.ReportingCheater">
            <summary>
            Patches <see cref="M:CheaterReport.IssueReport(GameConsoleTransmission,System.String,System.String,System.String,System.String,System.String,System.String,System.String@,System.Byte[]@,System.String,System.Int32,System.String,System.String)"/>.
            Adds the <see cref="E:Exiled.Events.Handlers.Server.ReportingCheater"/> event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Server.RespawningTeam">
            <summary>
            Patch the <see cref="M:Respawning.RespawnManager.Spawn"/>.
            Adds the <see cref="E:Exiled.Events.Handlers.Server.RespawningTeam"/> event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Server.RestartingRound">
            <summary>
            Patches <see cref="M:PlayerStats.Roundrestart"/>.
            Adds the RestartingRound event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Server.RoundEnd">
            <summary>
            Patches <see cref="M:RoundSummary.Start"/>.
            Adds the <see cref="E:Exiled.Events.Handlers.Server.EndingRound"/> and <see cref="E:Exiled.Events.Handlers.Server.RoundEnded"/> event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Server.RoundStarted">
            <summary>
            Patches <see cref="M:CharacterClassManager.CmdStartRound"/>.
            Adds the RoundStarted event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Server.SendingConsoleCommand">
            <summary>
            Patches <see cref="M:RemoteAdmin.QueryProcessor.ProcessGameConsoleQuery(System.String,System.Boolean)"/>.
            Adds the <see cref="E:Exiled.Events.Handlers.Server.SendingConsoleCommand"/> event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Server.SendingRemoteAdminCommand">
            <summary>
            Patches <see cref="M:RemoteAdmin.CommandProcessor.ProcessQuery(System.String,CommandSender)"/>.
            Adds the <see cref="E:Exiled.Events.Handlers.Server.SendingRemoteAdminCommand"/> event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Server.ServerSendingConsoleCommand">
            <summary>
            Patches <see cref="M:GameCore.Console.TypeCommand(System.String,CommandSender)"/>.
            Adds the <see cref="E:Exiled.Events.Handlers.Server.SendingRemoteAdminCommand"/> event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Server.WaitingForPlayers">
            <summary>
            Patches <see cref="M:ServerConsole.AddLog(System.String,System.ConsoleColor)"/>.
            Adds the WaitingForPlayers event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Warhead.Detonated">
            <summary>
            Patches <see cref="M:AlphaWarheadController.Detonate"/>.
            Adds the WarheadDetonated event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Warhead.Starting">
            <summary>
            Patch the <see cref="M:PlayerInteract.CallCmdDetonateWarhead"/>.
            Adds the <see cref="E:Exiled.Events.Handlers.Warhead.Starting"/> event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Warhead.StartingByServer">
            <summary>
            Patch the <see cref="M:AlphaWarheadController.StartDetonation"/>.
            Adds the <see cref="E:Exiled.Events.Handlers.Warhead.Starting"/> event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Warhead.Stopping">
            <summary>
            Patches <see cref="M:AlphaWarheadController.CancelDetonation(UnityEngine.GameObject)"/>.
            Adds the <see cref="E:Exiled.Events.Handlers.Warhead.Stopping"/> event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Fixes.CharacterClassManagerLoadSpam">
            <summary>
            Fixes <see cref="P:Mirror.NetworkBehaviour.isServer"/> property.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Fixes.DoubleSpawn">
            <summary>
            Fixes <see cref="P:CharacterClassManager.NetworkCurClass"/> property.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Fixes.MuteHandlerClear">
            <summary>
            Fixes <see cref="M:MuteHandler.Reload"/> method.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Generic.AntiFly">
            <summary>
            Patches <see cref="M:PlayerMovementSync.AntiFly(UnityEngine.Vector3,System.Boolean)"/>.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Generic.GhostMode">
            <summary>
            Patches <see cref="M:PlayerPositionManager.TransmitData"/>.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Generic.IndividualFriendlyFire">
            <summary>
            Patches <see cref="M:WeaponManager.GetShootPermission(CharacterClassManager,System.Boolean)"/>.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Generic.Scp096MaxShield">
            <summary>
            Patches the <see cref="P:PlayableScps.Scp096.MaxShield"/> property.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Generic.Scp173BeingLooked">
            <summary>
            Patches <see cref="M:Scp173PlayerScript.FixedUpdate"/>.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Generic.ServerNamePatch">
            <summary>
            Patch the <see cref="M:ServerConsole.ReloadServerName"/>.
            </summary>
        </member>
    </members>
</doc>
